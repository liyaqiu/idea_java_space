Vue相关:
  Vue中的插槽有几种:
    - 默认插槽
    - 具名插槽
    - 作用域插槽
  Vue中的生命周期钩子函数你都用过哪些:
    功能:
      - 官方生命周期图 https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA
    beforeCreate:
      - 初始化，生命周期、事件，但数据代理还未开始
      - 此时，无法通过VM访问到data中的数据、methods中的方法。
    created:
      - 初始化，数据监测，数据代理
      - 此时，可以通过VM访问到data中的数据、methods中的方法。
    beforeMount:
      - 此阶段之前Vue开始解析模版，在内存中生成虚拟DOM，页面还不能显示解析好的内容
      - 页面呈现的是未经过Vue编译的DOM结构。
      - 所有对DOM的操作，最终都不生效，意思是就算你用原生操作了DOM，最后会被Vue解析后把之前内容覆盖
    mounted(常用):
      - 此阶段之前，Vue将内存中的虚拟DOM转为真实DOM插入页面。
      - 此时，页面中呈现的是经过Vue编译的DOM，对DOM的操作是有效的。
      - 至此初始化过程结束，一般在此进行开启定时器，发送网络请求，订阅消息，绑定自定义事件等初始化操作
    beforeUpdate:
      - 此时，数据是新的，但是页面是旧的，即，页面尚未和数据保持同步。
    updated:
      - 在此阶段之前，Vue根据新数据，生成的虚拟DOM与旧的虚拟DOM进行比较，最终完成页面更新，即完成了Model->View的更新
      - 此时，数据是新的，页面也是新的，即，页面和数据保持同步。
    beforeDestroy(常用):
      - 此时，VM中所有的，data、methods、指令等等，都处于可用状态，马上要执行销毁的过程。
      - 一般在此阶段，关闭定时器，取消订阅消息，解绑自定义事件等收尾操作。
      - "
        注意事项
          销毁后借助Vue开发者工具看不到任何信息。
          销毁后自定义事件会失效，但原生DOM事件依然有效。
          一般不会在beforeDestroy操作数据，因为即便操作数据，也不会在触发更新流程了。
      "
    destroyed:
    $nextTick:
      - 此钩子用于下次渲染执行，比如，一个元素隐藏了，突然需要显式并且获取焦点，那么获取焦点的操作就需要等下一次渲染在执行
    路由器专有的钩子:
      - acticated  当组件被路由回来的时候触发
      - deacticated 当组件被路由走的时候触发
  Vue中路由有几种方式:
    - 一般路由
    - 编程式导航路由
  Vue中的路由守卫都有用过那些:
    - 全局路由守卫(前置路由守卫，后置路由守卫)
    - 独享路由守卫
    - 组件路由守卫
  Vue-6种组件通讯方式:
    1父传子props（父子通吃）:
      - props
      - 父组件传递给子组件(普通数据即刻)
      - 子组件传递给父组件(利用函数作为回调传递)
    2子传父，自定义事件(@xxxName='fun'):
      - 自定义事件，父为子绑定事件 @xxxName='fun'  子组件通过 this.$emit('xxxName',arg1)调用
    3万能:
      - 在全局绑定$bus， 在想要拿到参数的组件中绑定回调 $on('xxxName')和$off('xxxName')，在传递参数的组件同触发回调 this.$emit('xxxName',arg1)调用
    4万能:
      - Vuex 统一状态管理
    5子传父:
      - 父通过ref拿到子组件的引用，利用$on('xxxName')为子组件绑定函数，子组件通过 this.$emit('xxxName',arg1)调用
    6:
      - 利用插槽进行传递
    7万能:
      - pubsub.js 发布与订阅