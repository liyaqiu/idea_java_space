
master_process on;#默认为on off
user  root; #使用root来启动work进程
worker_processes  1;
error_log  logs/error.log  debug;
events {
    #accept_mutex on;#是否开启work队列机制
    #multi_accept on;#允许一个wrok接受多个请求
    use epoll; #使用多路复用io
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  test/html;

    log_format  myformat  '[1]$remote_addr - [2]$remote_user [$time_local] "[3]$request" '
                      '[4]$status $body_bytes_sent "$http_referer" '
                      '"[5]$http_user_agent" "[6]$http_x_forwarded_for"';
    access_log  logs/access.log  myformat;

    sendfile        on; #功能：减少copy次数，以及减少用户态和内核态的切换
    #tcp_nopush tcp_nodelay 两者互斥，在内核2.5.9以后兼容，当tcp_nopush未满并且达到阈值，nginx会强制tcp_nodelay发送数据包
    tcp_nopush on; #需要sendfile打开才能用，功能：将数据放缓存区装满以后一起发送
    tcp_nodelay on; #功能：不需要等待延迟，直接发送
    keepalive_timeout  65;

    log_format  proxylog  '$scheme://$http_host$request_uri----client: $remote_addr';
    server {
         listen       8088;
         server_name  localhost;

        #location不使用正则表达式 root 和 alias 用法
             #http://192.168.0.203/abc/hello.html    资源路径 /root/html/abc/hello.html
             #location /abc {
             #    root  /root/html;
             #    access_log  logs/lb3.log  proxylog;
             #}
             #http://192.168.0.203/abc/hello.html    资源路径 /root/html/hello.html
             #location /abc {
             #     alias  /root/html;
             #     access_log  logs/lb3.log  proxylog;
             #}
        #location使用正则表达式 root 和 alias 用法
             #http://192.168.0.203/abc/hello.html    资源路径 /root/html/abc/hello.html
             #location ~ /abc/.* {
             #    root  /root/html;
             #    access_log  logs/lb3.log  proxylog;
             #}
             #官方用法 http://nginx.org/en/docs/http/ngx_http_core_module.html#alias
             #http://192.168.0.203/abc/hello.html    资源路径 /root/html/hello.html
             location ~ /abc/(.*) {
                 alias  /root/html/$1;
                 access_log  logs/lb3.log  proxylog;
             }
    }
}

