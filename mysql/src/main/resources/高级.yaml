批量创建数据: "
    CREATE TABLE IF NOT EXISTS empoyees(
      id int,
      salary DECIMAL(10,2),
      last_name VARCHAR
  )

  DROP PROCEDURE IF EXISTS batch_insert;
  DELIMITER $
  CREATE PROCEDURE batch_insert()
  BEGIN
      DECLARE count INT DEFAULT 0;
      loop_label:LOOP

          SELECT 1;

          IF count > 10 THEN LEAVE loop_label;
          ELSE INSERT INTO empoyees(id,salary,last_name) VALUES(count,count*10,CONCAT('eric',count));
          END IF;
          SET count = count + 1;

      END LOOP loop_label;

  END $

  DELIMITER ;
"
架构篇:
  字符集&比较规则操作:
    概述: "
          与创建数据库有关
          character_set_server	    utf8    服务器级别的字符集(修改这里直接影响character_set_database)
          character_set_database	utf8    当前数据库的字符集
          与客服端和服务器之间传输有关
          character_set_client	    utf8    服务器解码请求时用的字符集(必须和客户端编码一直，需要做解码)
          character_set_connection	utf8    放服务器处理请求时会把请求字符串从character_set_client转为character_set_connection(必须和表的编码一直，需要做转码，因为涉及到查表)
          character_set_results	    utf8    服务器向客户端返回数据时使用的字符集(必须和客户端编码一直，需要做编码)

          character_set_filesystem	binary
          character_set_system	    utf8
          character_sets_dir	    /usr/share/mysql/charsets/
        "
    查看系统全部字符集: "
      查看数据库支持的所有字符集
        SHOW CHARACTER SET
        SHOW CHARSET
        SHOW CHARACTER SET LIKE 'utf8%'
        SHOW CHARACTER SET WHERE Charset = 'utf8'
      查看当前使用的字符集
        SHOW GLOBAL VARIABLES LIKE 'character%';
        SHOW SESSION VARIABLES LIKE 'character%';
    "
    临时修改修改字符集: "
      全局系统变量
      SHOW GLOBAL VARIABLES LIKE 'char%'

      SET @@global.character_set_client = utf8mb4;
      SET @@global.character_set_connection = utf8mb4;
      SET @@global.character_set_results = utf8mb4;

      会话系统变量
      SHOW SESSION VARIABLES LIKE 'char%'
      #方式1
      SET @@session.character_set_client = utf8mb4;
      SET @@session.character_set_connection = utf8mb4;
      SET @@session.character_set_results = utf8mb4;
      #方式2
      SET NAMES utf8mb4;
      #方式3
      SET character_set_client = utf8;
      SET character_set_connection = utf8;
      SET character_set_results = utf8;
    "
    查看比较规则: "
      SHOW COLLATION
      SHOW COLLATION LIKE 'utf8%'
      SHOW COLLATION WHERE Collation = 'utf8_general_ci'
    "
    修改字符集(my.cnf): "
      [client]
      default-character-set=utf8
        character_set_client	    utf8    服务器解码请求时用的字符集(必须和客户端编码一直，需要做解码)
        character_set_connection	utf8    放服务器处理请求时会把请求字符串从character_set_client转为character_set_connection(必须和表的编码一直，需要做转码，因为涉及到查表)
        character_set_results	    utf8    服务器向客户端返回数据时使用的字符集(必须和客户端编码一直，需要做编码)
      [mysqld]
      character_set_server=utf8
        character_set_server	    utf8    服务器级别的字符集(修改这里直接影响character_set_database)
        character_set_database	    utf8    当前数据库的字符集
    "
  SQL大小写敏感问题:
    概述:
      - SHOW VARIABLES LIKE '%lower_case_table_names%'
      - 设置0大小写敏感(Linux)，数据库、表名、表的别名、变量名是严格区分大小写，其他则不区分。
      - 设置1大小写不敏感(Window)，创建的表、数据库都是以小写形式存放在磁盘上，对于SQL语句都是转换为小写对表和数据库进行查找
    修改:
      MYSQL5.7: 在my.cnf文件中的[mysqld]中加入 lower_case_table_names = 1 然后重启数据库
      MYSQL8.0: "
        1.停止Mysql服务
        2.删除数据库目录 /var/lib/mysql（禁止删除，严重）
        3.在my.cnf文件中的[mysqld]中加入 lower_case_table_names = 1
        4.启动Mysql服务
      "
    SQL编写规则: 关键字和函数名称全部大写，其他则为小写
  严格模式vs轻松模式(sql_mode):
    概述:
      - 查看 SHOW SESSION VARIABLES LIKE '%sql_mode%' / SHOW GLOBAL VARIABLES LIKE '%sql_mode%'
      - 临时修改 SET SESSION sql_mode = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'
      - 永久修改 在my.cnf文件[mysqlId]中添加 sql_mode = ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
    模式介绍:
      默认:
        ONLY_FULL_GROUP_BY: 对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不和方法的，因为列不在GROUP BY语句中
        STRICT_TRANS_TABLES: 在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制。
        NO_ZERO_IN_DATE: 不允许日期和月份为零
        NO_ZERO_DATE: MYSQL数据库不允许插入零日期，插入零日期会抛出错误而不是警告
        ERROR_FOR_DIVISION_BY_ZERO: 在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时MYSQL返回NULL
        NO_ENGINE_SUBSTITUTION: 如果需要的存储引擎被禁用或未编译，那么抛出错误，不设置此值时，用默认的存储引擎替代，并抛出一个异常
      非默认:
        NO_AUTO_VALUE_ON_ZERO: 该值影响自增长列的插入。默认设置下，插入0或者NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。
        NO_AUTO_CREATE_USER: 禁止GTANT创建密码为空的用户
        PIPES_AS_CONCAT: 将 '||' 视为字符串的连接操作符而非运算符，这和ORACLE数据库是一样的，也和字符串的拼接函数CONCAT相类似
        ANSI_QUOTES: 不能用双引号来引用字符串，因为它被编译为识别符
  数据目录:
    概述:
      - 查看数据目录(/var/lib/mysql/)存放位置 SHOW VARIABLES LIKE '%datadir%'
    核心数据库介绍:
      mysql: 它存储了MYSQL的用户账户和权限信息，一些存储过程、事件的定义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。
      information_schema: 它存储了MYSQL服务器维护的所有其他数据库的信息，比如有哪些表，哪些视图，哪些触发器，哪些列，哪些索引。这些信息并不是真实的用户数据，而是一些描述信息，有时候也称为元数据。有一部分以innodb_sys开头的表，用于表示内部系统表
      performance_schema: 它存储了MYSQL服务器运行过程的一些状态信息，可以用来监控MYSQL服务的各类性能指标。包括统计最近执行了哪些语句，在执行过程的每个阶段花费了多长时间，内存的使用情况等信息。
      sys: 这个数据库主要是通过视图的形式把information_schema和performance_schema结合起来，帮助系统管理员和开发人员监控MYSQL的性能
    系统表空间(ibdata1)vs独立表空间(.ibd):
      Innodb存储引擎下:
        概述:
          - 查看 SHOW GLOBAL VARIABLES LIKE '%innodb_file_per_table%'
          - (默认)值为1代表使用独立表空间(../数据目录/xxx数据库/.ibd文件中)
          - 值为0代表使用系统表空间(../数据目录/ibdata1文件中)
        永久修改: 在my.cnf文件的[server]中 innodb_file_per_table = 1
      MyISAM存储引擎下:
        - 结构则不同，更多细节查看，https://www.bilibili.com/video/BV1iq4y1u7vj?p=104&spm_id_from=pageDriver&vd_source=cc17fab1d456bc3958dcb51e2fdd520b
  配置文件的使用(my.cnf): "
    配置文件有如下常用组
      [server]
      [mysqld]
      [mysqld_safe]
      [mysql.server]
      [mysql]
      [client]
      [mysqladmin]
      [mysqldump]
    启动命令加载到的组
      mysqld         启动服务器  [server] [mysqld]
      mysqld_safe    启动服务器  [server] [mysqld]    [mysqld_safe]
      mysql.server   启动服务器  [server] [mysqld]    [mysql.server]
      mysql          启动客户端  [client] [mysql]
      mysqladmin     启动客户端  [client] [mysqladmin]
      mysqldump      启动客户端  [client] [mysqldump]
  "
  MYSQL逻辑架构:
    概述:
      - MYSQL语句底层执行流程(SQL语句 -> 解析器(语法分析、语义分析，得到语法分析树) -> 优化器(逻辑优化、物理优化、得到查询计划) -> 执行器 -> 查询结果并返回)
    连接层: 连接池
    服务层:
      概述:
        - 查询缓存、SQL接口、解析器、优化器
      MYSQL5.7查询缓存:
        概述:
          - 在mysql5.7有查询缓存，在mysql8.0已经移除
          - 查询缓存非常鸡肋，命中率极低(同样的sql多一个空格都不会被命中)
        使用: "
          #在my.cnf文件中的[mysqld]中设置query_cache_type = 1，默认为关闭，可以开启查询缓存0代表关闭OFF，1代表开启ON，2代表按需使用DEMAND(select SQL_CACHE * from mysql.db,select SQL_NO_CACHE * from mysql.db)
          #查看查询缓存是否开启
          SHOW VARIABLES LIKE '%query_cache_type%'

          SELECT * from mysql.db
          SELECT user from mysql.db

          #查看所有执行过的sql记录
          SHOW PROFILES

          #查询最近一次执行sql的情况
          SHOW PROFILE
          SHOW PROFILE CPU,BLOCK IO
          #查询指定某一次执行sql的情况
          SHOW PROFILE FOR QUERY 2
          SHOW PROFILE CPU,BLOCK IO FOR QUERY 58
        "
    引擎层:
      概述:
        - 可插拔存储引擎 Innodb、MyISAM
      数据库缓冲池:
        概述: 缓冲池装载着磁盘中的数据，避免每次加载磁盘数据过慢，会把热数据加载到缓冲池中
        设置: "
          #缓冲池大小
            #innodb存储引擎默认为128mb，MYISAM存储引擎为key_buffer_size
            SHOW GLOBAL VARIABLES LIKE '%innodb_buffer_pool_size%'

            #临时设置
            #SET @@GLOBAL.innodb_buffer_pool_size = 134217728

            #永久设置
            #在my.cnf文件中的[SERVER]中设置innodb_buffer_pool_size = 134217728


          #缓冲实例个数
            #在并发场景下，多线程访问缓冲池时都需要加锁处理，单一的缓冲池请求的处理速度会慢，所以在缓冲池特别大的时候，我们可以把他们拆分成若干戈小的缓冲池，每个缓冲池都称为一个实例
            #他们都是独立的，独立的去申请内存空间，独立的管理各种链表，在并发访问并不会相互影响，从而提高并发处理能力
            #每个缓冲池大小 = 总大小innodb_buffer_pool_size/实例数innodb_buffer_pool_instances
            #Innodb规定，当innodb_buffer_pool_size小于1GB的时候设置多个缓冲池实例是无效的，Innodb会把实例个数改为1

            #缓存池数量，默认为1个
            SHOW GLOBAL VARIABLES LIKE '%innodb_buffer_pool_instances%'

            #临时设置
            #SET @@GLOBAL.innodb_buffer_pool_instances = 2
            #永久设置
            #在my.cnf文件中的[SERVER]中设置innodb_buffer_pool_instances = 2
        "
      存储引擎:
        概述:
          - 存储引擎就是指标的类型，其实存储引擎以前叫表处理器，后面改名为存储引擎。
          - 存储引擎的功能就是接收上层传下来的指令，然后对表中的数据进行提取或写入操作。
        分类:
          InnoDB:
            概述:
              - mysql5.5之后默认使用
            优点:
              - 支持事务和外键约束
              - 除了insert和select，还有update和delete操作，那么优先选择InnoDB存储引擎
              - InnoDB是为处理巨大数量的最大性能设计的
              - 如果由于硬件或软件的原因导致服务器崩溃，在重启服务器之后不需要进行额外的操作，InnoDB崩溃恢复功能自动将之前提交的内容定型，然后撤销没有提交的进程，重启之后继续从崩溃点开始执行
              - InnoDB存储引擎在主内存中维护了缓冲池，高频率使用的数据将在内存中直接被处理。
            缺点:
              - 相比MYISAM存储引擎，InnoDB对写的处理效率差一些，并且占用更多的磁盘空间以保存数据和索引。
              - MYISAM只缓存索引，不缓存真实数据，InnoDB不仅缓存索引还缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响。
          MYISAM:
            概述:
              - mysql5.5之前默认使用
              - MYISAM提供了全文索引、压缩、空间函数(GIS)等
            优点:
              - 对insert和select效率高
            缺点:
              - 不支持事务和外键约束
              - 不支持行级锁
              - 如果出现宕机后可能导致数据无法恢复
          Archive:
            概述:
              - 归档引擎，仅仅支持insert和select，不支持update和delete
              - MYSQL5.5以后支持索引
              - 拥有很好的压缩机制，使用zlib压缩库。
              - 在记录请求的时候实时的进行压缩，经常被用来作为仓库使用。
              - 归档引擎才用了行级锁，支持AUTO_INCREMENT列属性，AUTO_INCREMENT列可以具有唯一索引或非唯一索引。尝试在任何其他列上创建索引会导致错误。
            优点:
              - 在相同数据量的情况下，相比MYISAM表要节约75%，相比InnoDB表要节约83%
              - 拥有很高的插入速度
            缺点:
              - 对查询的支持较差
            场景:
              - 归档引擎适合日志和数据归档类应用。适合存储大量的独立的作为历史记录的数据
            功能细节:
              B树索引: 不支持
              集群数据库支持: 不支持
              聚集索引: 不支持
              压缩数据: 支持
              数据缓存: 不支持
              加密数据: 支持
              外键: 不支持
              全文检索索引: 不支持
              地理空间数据类型: 支持
              地理空间索引: 不支持
              哈希索引: 不支持
              索引缓存: 不支持
              锁粒度: 行锁
              MVCC: 不支持
              存储限制: 没有任何限制
              交易: 不支持
              更新数据字段的统计信息: 支持
          Blackhole:
            概述:
              - 丢弃写操作，读操作会返回空内容
              - Blackhole存储没有实现任何存储机制，它会丢弃所有的insert插入的数据，不做任何保存。
              - 但服务器会记录Blackhole表的日志，所以它可以用于复制数据库到备库，或者简单的记录日志。但这种应用复方石会碰到很多问题，因为不推荐使用。
          CSV:
            概述:
              - CSV存储引擎存储数据时，以逗号分隔各个数据项。
              - CSV引擎可以将普通的CSV文件作为MYSQL的表来处理，但不支持索引。
              - CSV引擎可以作为一种数据交换的机制，非常有用(普通的CSV文件直接放到数据库文件中，或者拿出数据库文件直接可以打开使用)
          Memory:
            概述:
              - Memory存储引擎采用的逻辑介质是内存，响应速度很快，但是当mysqld守护京城崩溃的时候数据会丢失。
              - 要求数据类型是固定的，长度不固定的不可用(Blob和Text类型的不可用)
              - Memory存储引擎支持哈希索引和B+树索引，默认使用哈希索引。
              - 由于数据只存储在内存中，索引底层的只有一个元数据文件用于存储表结构。
              - Memory存储引擎表的大小是受限制的，取决于2个参数，max_rows和max_heap_table_size，其中max_rows可以在创建表指定，max_heap_table_size默认大小为16MB，可以按需进行扩容
            场景:
              - 目标数据比较小，而且非常频繁的进行访问，在内存中存放数据，如果太大的数据会造成内存溢出。
          Federated:
            概述:
              - Federated存储引擎是访问其他MYSQL服务器的一个代理，尽管改引擎看起来提供了一种很好的跨服务器的灵活性，但是也经常带来问题，因此默认是禁用的。
          Merge:
            概述:
              - Merge存储引擎是管理多个MYISAM表，构成的表集合
          NDB:
            概述:
              - NDB存储引擎是MYSQL集群专用的存储引擎，主要用于MYSQL Cluster分布式集群环境，类似于Oracle的RAC集群。
        InnoDB和MYISAM对比:
          引擎:      MYISAM                     InnoDB
          外键:      不支持                       支持
          事务:      不支持                       支持
          行锁:      不支持                       支持
          表锁:      支持                         支持
          并发:      不适合(操作1条记录导致整表锁住)   适合
          缓存:      只缓存索引                    缓存索引+真实数据
          内存:      内存使用小                    内存使用多
        设置: "
          #查看数据库所有的引擎
          SHOW ENGINES

          #查看默认的存储引擎
          SHOW GLOBAL VARIABLES LIKE '%default_storage_engine%'

          #设置存储引擎
          	#临时设置
          	SET GLOBAL default_storage_engine = InnoDB
          	#永久设置my.cnf
          	# default_storage_engine = InnoDB
        "
索引篇:
  概述:
    - 索引是存储引擎用于快速找到数据记录的一种数据结构
    - 索引的本质就是数据结构，可以理解为排好序的快速查找数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法。
    - 索引是在存储引擎中实现的，因此妹子存储引擎的索引不一定完全相同，并且每种存储引擎不一定支持所有的索引类型。
    - 存储引擎可以定义每个表的最大索引数和最大索引长度。
    - 所以存储引擎支持每个表至少16个索引，总索引长度至少位256字节。有些存储引擎支持更多的索引数和更大的索引长度。
  优点:
    - 提高数据检索的效率，降低数据库的IO成本
    - 通过创建唯一索引，可以保证数据库表中每一行数据的唯一性
    - 在实现数据的参考完整性方面，可以加速表和表之间的连接。换句话说，对有依赖关系的从表和主表联合查询时，可以提高查询速度
    - 在使用分组和排序子句进行数据查询时，可以显著减少查询中分钟和排序的时间，降低了CPU的消耗(因为索引的排序好的数据结构)
  缺点:
    - 创建索引和维护索引要消耗时间，并且随着数据量的增加，所耗费的时间也会增加
    - 索引需要占用磁盘空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间(存储在磁盘上)，如果有大量的索引，索引文件有可能比数据文件更快达到最大文件尺寸
    - 索然索引大大提高了查询速度，同时却会降低更新表的速度。当对表中的数据进行insert、delete、update的时候，索引也要动态维护，这样就降低了数据的维护速度
  tips:
    - 如果是大批量的insert、delete、update操作，可以考虑先把索引删除，等把操作做完在从新添加索引。
  b+tree:
    聚集索引vs非聚集索引:
      概述:
        - 聚集索引也叫聚簇索引(只能1个)
        - 非聚集索引也叫二级索引，或者辅助索引(1个或多个)
      聚集索引:
        概述:
          - img_5聚集索引.png
          - 数据页与数据页之间用双向链表，并且有序
          - 数据与数据之间用单向链表，并且有序
          - 最底部叶子节点存储(完整数据)
        优点:
          - 数据访问更快，因为聚集索引将索引和数据保存在同一个B+树种，因次从聚集索引中获取数据比非聚集索引更快
          - 聚集索引对于主键的排序查询和范围查找速度非常快，因为(数据页和数据)都是按照顺序存放的
          - 按照聚集索引排序顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多个数据页中提取数据，所以节省了大量IO操作
        缺点:
          - 插入速度严重依赖插入顺序，按照主键的顺序插入是最快的方式，否则有可能会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自动增长的主键列
          - 更新主键的代价很高，影响聚集索引和非聚集索引的更新。因此，对于InnoDB表，我们一般定义主键为不可更新
          - 二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据
        表中聚集索引的产生:
          - 对于MYSQL数据库，目前只有InnoDB数据引擎支持聚集索引，而MYISAM并不支持聚集索引。
          - 由于数据物理存储排序方式只能有一种，所以每个表只能有一个聚集索引(一个表只能有一个主键)。
          - 如果没有定义主键，InnoDB会选择一个非空+唯一约束的列生成聚集索引。
          - 如果连非空+唯一约束的列都没有，InnoDB会隐式生成一个聚集索引。
          - 为了充分利用聚集索引，所以InnoDB表的主键列尽量选用有序的ID，不建议使用无需的ID，比如(UUID、MD5、HASH、字符串)，因为主键无分发保证数据的顺序增长(维护聚集索引困难)。
      非聚集索引:
        概述:
          - img_6非聚集索引.png
          - 数据页与数据页之间用双向链表，并且有序
          - 数据与数据之间用单向链表，并且有序
          - 最底部叶子节点存储(该列+主键列)
        回表操作:
          - select * from dept where f2 = 4 ，需要回表操作，先在非聚集索引中查找，拿到主键列的值，在去聚集索引中接着查找
          - select f2 from dept where f2 = 4 ，不需要回表操作
        联合索引:
          概述:
            - 参考图img_7非聚集索引(联合索引).png
            - 数据页与数据页之间用双向链表，并且有序
            - 数据与数据之间用单向链表，并且有序
            - 最底部叶子节点存储(联合列f1+联合列f2+主键列)
    一般情况下不存在4层b+tree:
      - 一个数据页有16kb
      - 1层情况下，假设，100(数据页-真实数据) = 100(100条)
      - 2层情况下，假设，1000(数据页-目录) x 100(数据页-真实数据) = 100,000(10万条)
      - 3层情况下，假设，1000(数据页-目录) x 1000(数据页-目录) x 100(数据页-真实数据) = 100,000,000(1亿条)
      - 4层情况下，假设，1000(数据页-目录) x 1000(数据页-目录) x 1000(数据页-目录) x 100(数据页-真实数据) = 100,000,000,000(1千亿条)
调优篇:
  - 满外连接(LEFT OUTER JOIN)的时候，尽量用UNION ALL(不需要去重)，少用UNION(需要去重)
事务篇:
日志与备份篇:
