JVM官方规范文档: https://docs.oracle.com/javase/specs/index.html
语言排行榜: https://www.tiobe.com/tiobe-index/
概述篇:
  背景说明:
    生产环境中的问题:
      - 生产环境发生了内存溢出该如何处理?
      - 生产环境应该给服务器分配多少内存合适?
      - 如何对垃圾回授权的性能进行调优?
      - 生产环境CPU负载过高该如何处理?
      - 生产环境应该给应用分配多少线程合适?
      - 不加log，如何确定请求是否执行了某一行代码?
      - 不加log，如何实现查看某个方法的入参与返回值?
    为什么要调优:
      - 防止出现OOM
      - 解决OOM
      - 减少Full GC频繁出现
    不同阶段的考虑:
      - 上线前
      - 项目运行阶段
      - 线上出现OOM
  调优概述:
    监控的依据:
      - 运行日志
      - 异常堆栈
      - GC日志
      - 线程快粘
      - 堆转储快照
    调优的大方向:
      - 合理的编写代码
      - 合理使用硬件资源
      - 合理的进行JVM调优
  性能调优的步骤:
    第一步,性能监控(发现问题):
      功能:
        - GC频繁
        - CPU负载过高
        - OOM
        - 内存泄漏
        - 死锁
        - 程序响应时间较长
      描述:
        - 一种【非入侵】方式收集运行性能数据的方式
        - 监控通常是指一种在生产、质量评估或者开发环境下实施带有预防或主动性的活动
        - 当应用相关人员提出性能问题却没有提供足够多的线索时，首先我们需要进行性能监控，随后是分析。
    第二步,性能分析(排查问题):
      功能:
        - 打印GC日志，通过GCviewer、GC Easy、GCHisto、GCLogViewer、HPmeter，grabagecat等工具老分析日志信息
        - 灵活运用命令行工具， jstack、jmap、jinfo等
        - dump出堆文件，使用内存分析工具分析文件
        - 使用Arthas、jconsole、JVisualVM来实时查看JVM状态
        - jstack查看对战信息
      描述:
        - 一种【入侵】方式收集运行性能数据的方式，它会影响应用的吞吐量或响应性。
        - 性能分析是针对性能问题的答复结果，关注的范围通常比性能监控更加集中。
        - 性能分析很少在生产环境下进行，通常是在质量评估、系统测试或者开发环境下进行。
    第三步,性能调优(解决问题):
      功能:
        - 适当增加内存，根据业务背景选择垃圾回收器
        - 优化代码，控制内存使用
        - 增加机器，分散节点压力
        - 合理设置线程池线程数量
        - 使用中间件提高程序效率，比如缓存，消息队列等。
      描述:
        - 一种为改善应用响应性或者吞吐量而更改参数、源代码、属性配置的活动，性能调优是在性能空间，性能分析之后的活动。
  性能评估/测试指标:
    响应时间(暂停时间):
      - "
        从应用角度看，响应时间，提交请求和响应请求的过程占用的时间。一般比较关注平均响应时间。
          打开一个站点，几秒
          数据库查询一条记录(有索引)，十几毫秒
          机械磁盘一次寻址定位，4毫秒
          从机械磁盘顺序读取1M数据，2毫秒
          从SSD磁盘顺序读取1M数据，0.3毫秒
          从远程分布式换成Redis读取一个数据，0.5毫秒
          从内存读取1M数据，十几微妙
          Java程序本地方法调用，几微秒
          网络传输2kb数据，1微秒
      "
      - "
        从JVM GC角度看，暂停时间，执行垃圾收集暂停的时间(STW)
        设置参数: -XX:MaxGCPauseMillis
      "
    吞吐量:
      - 对单位时间内完成的工作量(请求)的量度
      - 在GC中，运行用户代码的时间占总运行时间的比例(总时间=用户线程+GC线程)，吞吐量为1-1/(1+n)，-XX:GCTimeRatio=n
    并发数:
      - 同一时刻，对服务器有实际交互的请求数
      - 大概1000人同时在线，估计并发数在5%-15%之间(50-150之间)
    内存占用:
      - Java堆区所占的内存大小
  内存泄漏场景:
    静态集合类:
      - 静态集合类，如HashMap。List等等，如果这些容器为静态的，那么他们的生命周期有可能与JVM一致，则容器中的对象在程序结束之前将不能被释放，从而造成内存泄漏。
      - 简单而言，长声明周期的对象持有短声明周期对象的引用，尽管短生命周期的对象不再使用，但是因为长声明周期对象持有它的引用而导致不能被回收。
    单例模式:
      - 单例模式，和静态集合导致内存泄漏的原因类似，因为单例的静态特性，它的生命周期可能和JVM一致，如果单例对象持有外部对象的引用，那么这个外部对象也不能被回收，就会造成内存泄漏。
    内部类持有外部类:
      - 内部类持有外部类，如果一个外部类的实例对象的方法返回了一个内部类的实例对象。
      - 这个内部类对象被长期引用，即使那个外部类实例对象不再被使用，但由于内部类持有外部类的实例对象，这个外部类对象将不会被GC回收，这样也会造成内存泄漏。
    各种连接，IO流，数据库连接，网络连接:
      - 在对数据库进行操作的过程中，首先需要建立与数据库的连接，当不再使用时，需要调用close()方法来释放与数据库的连接，只有连接被关闭后，才能被GC回收。
      - 否则，如果在访问数据库过程中，对Connection、Statment、ResultSet不显示关闭，将会造成大量的对象无法被GC回收，从而运用内存泄漏。
    变量不合理的作用域:
      - 一般而言，一个变量的定义的作用范围大于其使用范围，很有可能会造成内存泄漏。另一方面，如果没有及时把对象设置为null，很有可能回到内存泄漏的发生。
      - 尽量多定义方法局部变量，少使用类变量，以及实例变量。
    改变对象字段哈希值:
      - 当一个对象被存储进HashMap或者HashSet集合中以后，就不能修改这个对象中参与计算哈希值的字段了(重写hashcode方法)
      - 否则，对象字段修改后的哈希值与最初存储进集合中时候的哈希值就不同了，从而会导致set.contains(obj)==null或者map.get(obj)==null，导致set.remove(obj)或map.remove(obj)无法删除，造成内存泄漏问题。
      - 这也是String为什么被设置成了不可变类型的原因，我们可以放心的把String存入HashSet，或者HashMap的Key中。
      - 当我们想吧自定义的类保存到散列表中的时候，需要保证对象的HashCode值不可变，特殊情况可以考虑，先删除后改变在进行添加也行。
      - '
        Set<People> set = new HashSet<>();

          People people = new People();
          people.setName("hello");

          set.add(people);
          System.out.println(set.size());
          System.out.println(set.contains(people));

          //正确操作，如果字段属性参与了hash计算，那么需要先移除在添加，因为set需要从新计算hash值，否则会导致找不到该项
          set.remove(people);
          people.setName("str");
          set.add(people);

          System.out.println(set.size());
          System.out.println(set.contains(people));
      '
      - '
          Map<People,Object> map = new HashMap<>();

          People people = new People();
          people.setName("hello");

          map.put(people,"hello-world");

          //正确操作，如果字段属性参与了hash计算，那么需要先移除在添加,因为map需要从新计算hash值，否则会导致找不到该key
          map.remove(people);
          people.setName("str");
          map.put(people, "mymuy");

          System.out.println(map.size());
          System.out.println(map.get(people));
      '
    缓存泄漏:
      - 内存泄漏的另一个常见来源是缓存，一旦你把对象引用放入到缓存中，它就很容易被遗忘。
      - 比如，在测试环境中只有几百条数据，但是生产环境有几百万条数据。一旦遗忘以后，很有可能导致大批量的内存被占用，导致内存泄漏问题。可以考虑使用弱引用解决(WeakHashMap)。
    监听器和回调:
      - 如果客户端在你实现的API中注册回调，却没有显示的取消，那么就会积累，需要确保回调立即被当做垃圾收回的最佳方法是保存它的弱引用，例如将他们保存为WeakHashMap中的Key。
字节码查看工具:
  javap:
    - javap -v -p Test.class > D:/study/jvm/class.txt 对字节码进行解析查看(查看私有的)
    - javap -v  Test.class > D:/study/jvm/class.txt 对字节码进行解析查看
  binary viewer: https://binary-viewer.en.softonic.com/
  jclasslib:
    - idea setting -> plugins -> jclasslib bytecode viewer
    - win10 https://github.com/ingokegel/jclasslib/releases
JVM监控及诊断工具:
  堆转储快照文件(dump文件):
    - 所有的对象信息，包括对象实例，成员变量，存储于栈中的基本类型值和存储于堆中的其他对象的引用值。
    - 所有的类信息，包括类加载器，类名称，父类，类变量等。
    - GCRoot到所有的这些对象的引用路径
    - 线程信息，包括线程的调用栈及此线程的线程局部变量
  命令行工具:
    常用:
      jps:
        功能:
          - 查看Java进程信息
        使用:
          - jps 查看正在运行的Java进程
          - jps -q 查看JVM pid
          - jps -l 查看完整类名或完整的jar包路径
          - jps -m 输出虚拟机进程启动时传递给main(String[] args)的参数
          - jps -v 输出虚拟机进程启动时的JVM参数，比如-Xms20m -Xmx20m
      jstat:
        功能:
          - 查看JVM统计信息
          - jstat用于监视JVM各种运行状态信息，它可以显示本地或者远程虚拟机进程中的类加载、内存、垃圾收集、JIT编译等运行数据。
          - 垃圾回收器会主动将jstat需要的摘要数据保存至固定位置之中，而jstat只需要直接读取即可。
          - 在没有GUI图形界面，只提供了纯文本控制台环境的服务器上，它是运行期定位虚拟机性能问题的首先工具。常用于检测垃圾回收问题以及内存泄漏问题。
        重点总结:
          方案1(分析是否会触发OOM场景):
            - -t参数可以获得一段时间内程序执行的时间。t
            - GCT可以根据-t来计算出在段时间内GC一共花费了多少时间。gct
            - gct/t=GC占用的比例，如果该比例超过20%说明目前堆的压力比较大，如果比例超过90%，则说明堆里几乎没有可用空间，随时都可以能触发OOM。
          方案2(分析是否存在内存泄漏):
            - 在长时间运行的Java程序中，可以运行jstat命令连续获取多行性能数据，并取这N行数据中的OU列的最小值(已占用老年代的内存)。
            - 然后，每隔一段较长的时间重复一次上述操作，获取多组OU最小值。如果这些OU值呈现上涨趋势，则说明改Java程序的老年代内存已经在不断上涨没有被GC回收掉
            - 因此很可能存在内存泄漏问题，最后会导致OOM的发生。
        使用:
          类装载相关:
            - jstat -class 5168 查看类加载信息和卸载信息，以及卸载消耗的时间
            - jstat -class 5168 1000 每隔1000毫秒打印一次
            - jstat -class 5168 1000 10 一共打印10次结束
            - jstat -class -t 5168 1000 10 输出程序一共运行了多少秒(-t timestamp)
            - jstat -class -t -h3 5168 1000 10 每隔3行数据打印表头信息
          垃圾回收相关:
            gc:
              使用:
                - jstat -gc 5168 查看GC相关信息，(伊甸园区，幸存者区，老年代，方法区)
                - jstat -gc 5168 1000 每隔1000毫秒打印一次
                - jstat -gc 5168 1000 10 一共打印10次结束
                - jstat -gc -t 5168 1000 10 输出程序一共运行了多少秒(-t timestamp)
                - jstat -gc -t -h3 5168 1000 10 每隔3行数据打印表头信息
              说明:
                - S0C   幸存者0区总大小，字节
                - S1C   幸存者1区总大小，字节
                - S0U   幸存者0区使用大小，字节
                - S1U   幸存者1区使用大小，字节
                - EC    伊甸园区总大小，字节
                - EU    伊甸园区使用大小，字节
                - OC    老年代总大小，字节
                - OU    老年代使用大小，字节
                - MC    方法区总大小
                - MU    方法区使用大小
                - CCSC  压缩类空间总大小
                - CCSU  压缩类空间使用大小
                - YGC   MinorGC次数
                - YGCT  N次MinorGC花费总时间，秒
                - FGC   FullGC次数
                - FGCT  N次FullGC花费总时间，秒
                - GCT   N次GC花费总时间，秒(N次MinorGC花费总时间+N次FullGC花费总时间)
            gcutil:
              使用:
                - jstat -gcutil 5168 关注堆的各个区域使用占比情况
                - jstat -gcutil 5168 1000 每隔1000毫秒打印一次
                - jstat -gcutil 5168 1000 10 一共打印10次结束
                - jstat -gcutil -t 5168 1000 10 输出程序一共运行了多少秒(-t timestamp)
                - jstat -gcutil -t -h3 5168 1000 10 每隔3行数据打印表头信息
              说明:
                - S0    幸存者0区使用大小，字节，占比
                - S1    幸存者1区使用大小，字节，占比
                - E     伊甸园区使用大小，字节，占比
                - O     老年代使用大小，字节，占比
                - M     方法区使用大小占比
                - CCS   压缩类空间使用大小占比
                - YGC   MinorGC次数
                - YGCT  N次MinorGC花费总时间，秒
                - FGC   FullGC次数
                - FGCT  N次FullGC花费总时间，秒
                - GCT   N次GC花费总时间，秒(N次MinorGC花费总时间+N次FullGC花费总时间)
            gccause:
              使用:
                - jstat -gccause 5168 关注堆的各个区域使用占比情况和GC当前发生或最后一次发生的原因
                - jstat -gccause 5168 1000 每隔1000毫秒打印一次
                - jstat -gccause 5168 1000 10 一共打印10次结束
                - jstat -gccause -t 5168 1000 10 输出程序一共运行了多少秒(-t timestamp)
                - jstat -gccause -t -h3 5168 1000 10 每隔3行数据打印表头信息
              说明:
                - S0    幸存者0区使用大小，字节，占比
                - S1    幸存者1区使用大小，字节，占比
                - E     伊甸园区使用大小，字节，占比
                - O     老年代使用大小，字节，占比
                - M     方法区使用大小占比
                - CCS   压缩类空间使用大小占比
                - YGC   MinorGC次数
                - YGCT  N次MinorGC花费总时间，秒
                - FGC   FullGC次数
                - FGCT  N次FullGC花费总时间，秒
                - GCT   N次GC花费总时间，秒(N次MinorGC花费总时间+N次FullGC花费总时间)
                - LGCC  发生GC的原因
                - GCC   未知
            gcnew: 显示新生代GC状态
            gcnewcapacity: 显示内存与-gcnew基本相同，主要关注使用到的最大，最小空间
            gcold: 显示老年代GC状态
            gcoldcapacity: 显示内存与-gcold基本相同，主要关注使用到的最大，最小空间
            gcpermcapacity: 显示永久代的最大最小空间，JDK7及以前使用
          JIT相关:
            - jstat -compiler 5168 查看JIT编译器编译的方法、耗时等信息。
            - jstat -compiler 5168 1000 每隔1000毫秒打印一次
            - jstat -compiler 5168 1000 10 一共打印10次结束
            - jstat -compiler -t 5168 1000 10 输出程序一共运行了多少秒(-t timestamp)
            - jstat -compiler -t -h3 5168 1000 10 每隔3行数据打印表头信息
            - ------------------------------------------------------
            - jstat -printcompilation 5168 输出已经被JIT编译的方法
            - jstat -printcompilation 5168 1000 每隔1000毫秒打印一次
            - jstat -printcompilation 5168 1000 10 一共打印10次结束
            - jstat -printcompilation -t 5168 1000 10 输出程序一共运行了多少秒(-t timestamp)
            - jstat -printcompilation -t -h3 5168 1000 10 每隔3行数据打印表头信息
      jinfo:
        功能:
          - 查看JVM的配置参数信息，也可用于设置JVM配置参数。
        使用:
          查看参数:
            - jinfo -sysprops 3604 查看JVM环境信息，等同于用Java(System.getProperties())
            - jinfo -flags 3604 查看曾经给JVM赋过的参数，Non-default VM flags 非默认参数(一般是指系统给设置+用户设置的)，Command line 通过命令行设置的参数
            - jinfo -flag InitialHeapSize 3604 查看具体参数的值
          修改参数:
            - 查看可被修改的参数 java -XX:+PrintFlagsFinal -version | findStr "manageable"
            - 查看可被修改的参数 java -XX:+PrintFlagsFinal -version | grep "manageable"
            - "
                针对布尔型的修改
                  jinfo -flag PrintGCDetails 3604 查看具体参数的值
                    jinfo -flag  +PrintGCDetails 3604
                    jinfo -flag  -PrintGCDetails 3604
                针对数值型的修改
                  jinfo -flag MinHeapFreeRatio 3604 查看具体参数的值
                    jinfo -flag MinHeapFreeRatio=100 3604
              "
      jmap:
        功能:
          - 主要用于导出dump文件(堆存储快照文件)
          - 它还可以获取目标Java进程的内存相关信息，包括Java堆各个区域的使用情况、堆中对象的统计信息。类加载信息等。
          - 由于jmap将访问堆中的所有对象，为了保证在此过程中不被用户线程干扰，jmap需要借助安全点机制，让所有用户线程在不改变堆中数据的状态。也就是说，由jmap到处的堆快照必定是安全点位置，这个可能会导致基于改堆快照的分析结果存在偏差。
        使用:
          - 当一下指令执行没有任何响应的情况下加-F强制执行
          - jmap -dump:format=b,file=/root/test1.hprof 2680 生成堆转储文件
          - jmap -dump:format=b,live,file=/root/test1.hprof 2680 生成堆转储文件(只保存堆中存活对象)
          - jmap -heap 11508 > d:a.txt 显示当前堆分配以及使用情况
          - jmap -histo 11508 > d:b.txt 显示关于某个类模版实例，new对象实例是个数以及字节大小
          - jmap -permstat 11508 查看系统的ClassLoader信息，linux下使用,jdk7级以前使用
          - jmap -finalizerinfo 11508 查看堆积在finalizer队列中的对象，linux下使用
      jstack:
        功能:
          - 打印栈空间线程快照
          - 线程状态，重点关注 BLOCKED，阻塞状态有可能会导致死锁。
        使用:
          - jstack 10580 > /root/abc.tdump 打印栈空间线程快照，查看线程状态，是否出现死锁问题。
          - jstack -F 10580 当请求没响应的时候，执行强制执行。
          - jstack -l 10580 显示关于锁的附加信息
          - jstack -m 10580 如果有调用到本地方法的话，可以显示C/C++的堆栈
    不常用:
      jcmd:
        功能:
          - 多功能命令行
          - 它是一个多功能的工具，可以用来实现前面除了jstat之外的所有命令的功能。
        使用:
          - jcmd help
          - jcmd 类似于 jps
          - jcmd 2432 help
          - jcmd 2432 Thread.print  类似于jstack
          - jcmd 2432 VM.command_line
      jhat:
        功能:
          - jdk自带堆分析工具
          - jhat命令与jmap命令搭配使用，用于分析jmap生成的堆转储快照文件(dump文件)。
          - jhat内置了一个微型的http/HTML服务器
          - JDK9及以后被删除，官方建议用VisualVM代替
        使用:
          - jhat  D:abc.hprof  http://localhost:7000
          - jhat -port 8888 D:abc.hprof  http://localhost:8888
      jstatd:
        功能:
          - 远程主机信息收集
          - 之前的命令只涉及到监控本机的Java应用程序，而这些工具(jps、jstat)还可以支持远程使用。
          - jstatd是一个RMI服务端程序，它的作用相当于代理服务器，建立本地计算机与远程监控工具的通讯。
        使用:
  图形化工具:
    常用:
      visualvm:
        功能:
          - visualvm是一款功能强大的多合一故障和性能监控可视化工具，取代了jconsole工具。
          - 插件安装地址(https://visualvm.github.io/pluginscenters.html)
          - 可以生成dump文件保存到本地，以及加载dump文件进行分析
        jdk:
          - jvisualvm.exe
          - 设置jdk8版本插件更新地址(http://visualvm.github.io/archive/uc/8u40/updates.xml.gz)
          - 需要安装的插件(Visual GC)
        visualvm:
          - 下载visualvm(https://visualvm.github.io/index.html)
          - 设置VisualVM2.1.1版本插件更新地址(https://visualvm.github.io/uc/release211/updates.xml.gz)
          - 需要安装的插件(VisualGC、Mbeans)
        idea:
          - 集成到idea中，plugins(VisualVM Launcher)
      Eclipse-MAT(Memory Analuzer Tool):
        功能:
          - 它是一款功能强大的Java堆内存分析工具，用于查找内存泄漏以及查看内存消耗情况
          - MAT是以及Eclipse开发的，是一款免费的性能分析工具
          - 下载地址 http://www.eclipse.org/mat/previousReleases.php
          - 下载地址 https://archive.eclipse.org/mat/1.8/rcp/MemoryAnalyzer-1.8.0.20180604-win32.win32.x86_64.zip
          - 支持格式hprof二进制转储文件(dump文件)
          - 最吸引人的还是能够快速为开发人员生成内存泄漏报表，方便定位问题和分析问题。
        浅堆和深堆:
          - "
            对象A，B，C，D，E，假设对象引用关系如下
                A -> C , A -> D
                B -> C , B -> E

            A浅堆大小 = A
            A深堆大小 = A + D
            A保留集大小 = A + D
            A对象大小 = A + C + D

            B浅堆大小 = B
            B深堆大小 = B + E
            B保留集大小 = B + E
            B对象大小 = B + C + E
          "
          - "
            https://www.bilibili.com/video/BV1PJ411n7xZ?p=332
            浅堆
              浅堆大小，是指一个对象所消耗的内存。
              浅堆大小 = (int4字节,long8字节,引用4字节)+对象头8字节=合计20字节，向8字节对齐(需要被8整除)，所以需要填充，因此占用24字节。
            深堆
              保留集，对象A的保留集指当对象A被GC后，可以释放的所有的对象集合(包括A本身)，即对象A的保留集可以被认为是只能通过对象A被直接或节俭访问到的所有对象的集合。
              保留集，只保存了该对象能够被释放的对象。
              深堆大小，是指对象的保留集中所有的对象的浅堆大小之和。
          "
        使用:
          - "
            Leak Suspects 泄漏嫌疑报告
          "
          - "
            Histogram 类直方图
              -> Merge Shortest Paths To GC Roots 用于排除强引用、软引用、弱引用、虚引用
              -> Compare to Another Heap Dump 用于比较两个dump文件的增量大小
          "
          - "
            Thread Overview 线程概述(点击小齿轮) 通过查看某个线程携带的局部变量的信息大小。
            如果查看线程占用深堆大小很大，证明方法里面的局部变量存储着导致的OOM，如果线程占用深堆不大，很可能是类变量导致OOM
          "
          - "
            with outgoing references 它都引用了谁
            with incoming references 谁都引用了它
          "
        MAT-OQL:
          参考文档: https://blog.csdn.net/m0_63256311/article/details/121563372
          Select:
            - 查看对象的引用实例(相当于outgoing references)
            - select * from java.util.ArrayList
            - select * from 0xee8190f8
          objects:
            - 可以将返回结果集中的项以对象的形式显示
            - SELECT OBJECTS a.elementData FROM java.util.ArrayList a
          AS RETAIND SET:
            - 可以得到对象的保留集
            - SELECT AS RETAINED SET * FROM 0xee8190f8
          DISTINCT:
            - 在结果集中去除重复对象
            - SELECT DISTINCT objects classof(s) FROM java.lang.String s
      Jprofiler:
        功能:
          - 方法调用，对方法调用的分析可以帮助你了解应用程序正在做什么，并找到提高其性能的方法
          - 内存分配，通过分析堆上对象，引用链，垃圾回收能帮助你修复内存泄漏问题，优化内存使用
          - 线程和锁，JProfiler提供多种针对线程和锁的分析视图，帮助你发现多线程相关问题
          - 高级子系统，许多性能问题都发生在更高的语义级别上。例如，对 JDBC调用，你可能希望找出执行慢的SQL语句，JProfiler支持对这些子系统进行集成分析。
        安装:
          - 下载地址 https://www.ej-technologies.com/products/jprofiler/overview.html
          - Jprofiler集成idea Session -> Integrations -> IntelliJ IDEA
          - idea集成Jprofiler setting -> plugin -> Jprofiler
        使用:
          数据采集方式:
            - JProfiler本身没有指出数据的采集类型，这里的采集类型是针对方法调用的采集类型，因为JProfiler的绝大多数核心功能都依赖方法调用采集的数据，所以可以直接认为是Jrpofiler的数据采集类型
            - "
              instrumentation(重构模式)
              这是JProfiler全功能模式，在class加载之前，Jprofiler把相关功能代码写入到需要分析的字节码中(class)，对正在运行的jvm有一定的影响。
              优点: 功能更加强大，在此设置中，调用堆栈信息是准确的。
              缺点: 若要分析的Class比较多，则对应用性能影响较大，CPU开销可能更高，如果确实需要用到此模式，一般结合Filter使用，只对特定的类或包进行分析。
            "
            - "
              Sampling(抽样模式,一般场景使用这种)
              类似于样本统计，每个一点时间(5ms)将每个线程栈中方法栈中的信息统计出来。
              优点: 对CPU的开销非常低，对应用影响小，及时不配置任何Filter也没问题。
              缺点，一些数据或者特性能不能提供，例如，方法的调用次数，执行时间等。
            "
          Telemetries(遥感监测):
          Live Memory(内存视图):
          Heap Walker(堆遍历):
          CPU Views(CPU视图):
          Threads(线程视图):
          Mointors&Locks(检测器&锁):
      Arthas:
        - 阿里巴巴开源的Java诊断工具。
    不常用:
      jconsole:
        - jdk自带 jconsole.exe
        - 官方文档 https://docs.oracle.com/javase/7/docs/technotes/guides/management/jconsole.html
      jmc:
        - jdk自带 jmc.exe
      Btrace:
        - Java运行时追踪工具，可以在不停机的情况下，跟踪指定的方法调用，构造函数调用和系统内存信息等。
JVM常规:
    参数设置:
      参数文档: https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
      GC日志参数:
        常用:
          - -XX:+PrintGCDetails 打印详细的GC日志并且在程序退出时打印堆信息
          - -verbose:gc / -XX:+PrintGC  精简日志
          - -XX:+PrintGCDateStamps 打印时间 2022-05-26T16:50:53.187+0800
          - -XX:+PrintGCTimeStamps 打印jvm启动以后多少秒后触发的gc 24.244
          - -XX:+PrintHeapAtGC 打印触发GC后堆内存的前后对比
          - -Xloggc:D:/gc.log GC日志文件的输出路径
          - -XX:+HeapDumpOnOutOfMemoryError  -XX:HeapDumpPath=D:/abc.hprof 在程序出现OOM(意味着之前出现过GC，所以只有存活对象)的时候生堆转储快照文件(dump文件)
          - -XX:+HeapDumpBeforeFullGC -XX:HeapDumpPath=D:/abc.hprof 在程序出现FullGC 之前生成堆转储快照文件(dump文件)
          - -XX:+PrintStringTableStatistics 打印字符串常量池的信息【程序正常退出时打印】
        不常用:
          - -XX:+PrintCommandLineFlags 打印命令行设置过的参数
          - -XX:+PrintFlagsInitial 打印所有的参数的默认初始值(不执行用户代码)
          - -XX:+PrintFlagsFinal 打印所有的参数的最终值
          - -XX:+TraceClassLoading 打印当前JVM加载的所有类信息
          - -XX:-UsePerfData 使用该参数jsp和jstat无法获取该Java进程
      虚拟机栈参数:
          - 调整栈大小，避免栈溢出 -Xss1m
          - 局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或者间接引用的对象都不会被回收
      堆区参数:
        设置堆大小: -Xms20m -Xmx20m / -XX:InitialHeapSize=10m -XX:MaxHeapSize=10m
        新生代和老年代占比: -XX:NewRatio=2 / -Xmn400m(-XX:MaxNewSize=10m) 设置新生代跟老年代占比/或者强行设置新生代大小
        伊甸园区和幸存者区占比: -XX:SurvivorRatio=8 / -XX:-UseAdaptiveSizePolicy 设置伊甸园区和幸存者区占比/关闭自适应内存策略
        开启/设置线程私有缓冲区: -XX:+UseTLAB / -XX:TLABSize=512k
        设置对象年龄的阈值: -XX:MaxTenuringThreshold=15
      方法区:
        元空间:
          设置元空间大小:
            - 默认 -XX:MetaspaceSize=21m    -XX:MaxMetaspaceSize=-1无限大
            - 修改 -XX:MetaspaceSize=1g     -XX:MaxMetaspaceSize=1g
            - 查看 jinfo -flag MetaspaceSize/MaxMetaspaceSize 10780
            - 特别说明 只能通过jinfo -flag查看 初始值和最大值，图形界面看不到
      设置直接内存的大小:
        - 默认 直接内存大小 = 最大堆内存大小(-Xmx)
        - 修改 -XX:MaxDirectMemorySize=100m
        - 查看 jinfo -flag MaxDirectMemorySize 6296
      设置String常量池数组大小:
        - 字符串常量池是一个固定大小的哈希表(Hashtable)=数组+链表
        - jdk6默认 -XX:StringTableSize=1009
        - jdk7及以后默认 -XX:StringTableSize=60013
        - 打印字符串常量池的信息【程序正常退出时打印】 -XX:+PrintStringTableStatistics
      GC参数设置:
        - 打印设置过的参数 -XX:+PrintCommandLineFlags
        - 方式1(SerialGC)
            查看 jinfo -flag UseSerialGC 15064
            修改 -XX:+UseSerialGC 等同于 Serial（新生代）+ Serial Old（老年代）
        - 方式2(ParNewGC)
            查看 jinfo -flag UseParNewGC 15064
            查看 jinfo -flag UseConcMarkSweepGC 15064
            查看 jinfo -flag ParallelGCThreads 17812
            修改 -XX:+UseParNewGC（新生代） 等同于 ParNew（新生代）+ Serial Old（老年代）
            修改 -XX:+UseParNewGC（新生代） -XX:+UseConcMarkSweepGC（老年代） 等同于 ParNew（新生代）+ CMS（老年代）+ Serial Old（老年代）
            修改ParNew并行回收GC线程数，此值最好小于等于CPU个数 -XX:ParallelGCThreads=25
                默认当CPU个数小于8，默认等于CPU个数
                默认当CPU个数大于8，3+[5*CPU个数/8]
        - 方式3(ParallelGC)(吞吐量优先)
            查看 jinfo -flag UseParallelGC 17752
            查看 jinfo -flag UseParallelOldGC 17752
            修改 -XX:+UseParallelGC -XX:+UseParallelOldGC 等同于 Parallel Scavenge（新生代）+ Parallel Old（老年代）
            修改 -XX:+UseParallelGC 等同于 Parallel Scavenge（新生代）+ Parallel Old（老年代）
            修改 -XX:+UseParallelOldGC 等同于 Parallel Scavenge（新生代）+ Parallel Old（老年代）
            修改年轻代并行回收GC线程数，此值最好小于等于CPU个数 -XX:ParallelGCThreads=25
                默认当CPU个数小于8，默认等于CPU个数
                默认当CPU个数大于8，3+[5*CPU个数/8]
            修改
                -XX:MaxGCPauseMillis
                  设置回收器的最大停顿时间(STW时间)，单位是毫秒。
                  为了尽可能的把停顿时间控制MaxGCPauseMillis以内，回收器在工作时会调整Java堆大小或者其他一些参数
                  对于用户来说，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。
                -XX:GCTimeRatio
                  设置垃圾回收时间占总时间的比例，GC时间 = 1/(N+1)
                  吞吐量为1-1/(1+n)，-XX:GCTimeRatio=n
                  N取值为(0-100),默认为99，也就是垃圾回收时间不超过1%
                  与-XX:MaxGCPauseMillis参数有一定矛盾性，暂停时间越长，GCTimeRatio参数就容易超过设定的比例
                -XX:+UseAdaptiveSizePolicy
                  设置Parallel Scavenge回收器的自适应调节策略
                  在这种模式下，年轻代的大小，伊甸园区和幸存者区的比例，晋升老年代对象年龄等参数会被自动调整，已达到在堆大小，吞吐量和停顿时间之间的平衡点
                  在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆，目标的吞吐量(GCTimeRatio)和停顿时间(MaxGCPauseMillis),让虚拟机自己完成调优工作。
        - 方式4(CMS GC)(低延迟优先)
            查看 jinfo -flag UseConcMarkSweepGC 17752
            查看 jinfo -flag UseParNewGC 17752
            修改 -XX:+UseConcMarkSweepGC（老年代） 等同于 ParNew（新生代）+ CMS（老年代）+ Serial Old（老年代）
            修改
              -XX:CMSInitiatingOccupancyFraction=-1
                设置堆内存使用率的阈值，一旦到达该阈值，触发GC，通过该选项可以有效降低Full GC的发生
                    默认值为-1，则以-XX:CMSTriggerRatio=80为准
                    设置-XX:CMSInitiatingOccupancyFraction=20，则阈值为20%
                    JDK5及以前默认值为68，即当老年代的空间使用率达到68%时，会触发GC，JDK6及以上版本默认值为92%
                    如果用户线程使用内存较慢，则可以设置一个稍微大的阈值，大的阈值可以有效降低GC频率的触发，减少老年代回收的次数，可以较为明显的改善应用程序性能。
                    如果用户线程使用内存较快，则可以设置一个稍微小的阈值，避免CMS出现(Concurrent Mode Failure失败)导致Serial Old GC发生。
              -XX:+UseCMSCompactAtFullCollection(默认开启)
                用于指定在执行玩Full GC后对内存空间进行压缩整理，避免内存碎片的产生。不过由于内存碎片整理桂城无法并发执行，所以带来的问题就是暂停时间变得更长。
                  -XX:CMSFullGCsBeforeCompaction=0
                      设置在执行多少次Full GC后对内存空间进行压缩整理。默认没0，代表每次Full GC都会整理内存碎片
              -XX:ParallelCMSThreads=10
                设置CMS并发时候的GC线程数
                CMS默认启动的线程数是(ParallelGCThreads+3)/4
                ParallelGCThreads是年轻代并行回收器的线程数，当CPU资源比较紧张时，受到CMS回收器的GC线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。
        - 方式5(G1)
            查看 jinfo -flag UseG1GC 15064
            修改 -XX:+UseG1GC == G1（新生代+老年代）
            修改
              -XX:G1HeapReginSize
                  设置每个区域的大小，【值是2的次幂】(意思是说每一个区域的大小要为2的次幂 1MB 2MB 4MB 8MB 16MB 32MB)，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出来约2048个区域。默认是堆内存的1/2000
                  比如-XX:G1HeapReginSize=2  堆大小4096 = 2048*2
              -XX:MaxGCPauseMillis
                  设置期望达到的最大GC停顿时间(G1回收器会尽力实现，但不保证达到)，默认值是200ms
              -XX:ParallelGCThread
                  设置GC并行执行的线程数(用户线程会暂停，GC线程执行，简称STW)，最多设置为8
              -XX:ConcGCThreads
                  设置并发标记的线程数(用户线程与GC线程可以同时执行)，将n设置为并行垃圾回收线程数
                  (ParallelGCThreads)的1/4左右
              -XX:InitiatingHeapOccupancyPercent
                  设置触发并发GC周期的Java堆暂用率的阈值。超过此值，就会触发GC，默认为45
            G1的设计原则就是简化JVM性能调优，开发人员只需要简单的散步即可完成调优
              1.开启G1垃圾回收器 -XX:+UseG1GC
              2.设置堆的最大内存 -Xms6g -Xmx6g
              3.设置最大的暂停时间 -XX:MaxGCPauseMillis
            G1优化建议
              新生代大小
                避免使用-XX:NewRatio=2 / -Xmn400m(-XX:MaxNewSize=10m)等相关选项显示设置年轻代大小
                固定年轻代大小会覆盖暂停时间目标
              暂停时间目标不要太过苛刻
                G1的吞吐量目标是90%的引用程序时间和10%的垃圾回收时间
                评估G1的吞吐量时，暂停时间目标不要太严苛，目标太过严苛表示你愿意承受更多的垃圾回收频率，而且这些会直接影响到吞吐量。
    调优的目的:
      - 让GC执行次数减少，那么STW次数就减少(STW会导致用户线程暂停，GC线程执行垃圾回收)
      - MinorGC N分钟
      - MaiorGC和FullGC N*10倍以上分钟
      - FullGC是开发或者调优尽量要避免的，这样暂停时间会短一些
    GC控制台日志分析:
      PrintGCDetails日志:
        - "-Xms300m -Xmx300m -XX:+PrintGCDetails
          都没写则为堆区 52967K->17272K(294400K)
            堆区         回收前   回收后 总大小
          PSYoungGen: 52967K->1240K(89600K)
            新生代区     回收前   回收后 总大小
          ParOldGen: 151239K->81797K(204800K)
            老年代区     回收前   回收后 总大小
          Metaspace: 3492K->3492K(1056768K)
            元空间     回收前   回收后 总大小
          0.4266590 secs 指具体GC消耗时间
          Times: user=1.17 指垃圾收集器花费的所有CPU时间(用户态回收耗时)
          sys=0.02 指花费在等待系统调用或者系统事件的时间(内核态回收耗时)
          real=0.05 secs 指GC从开始到结束的时间，包括其他进程占用时间片的实际时间(GC整个过程总耗时)
          垃圾回收时间
          [ GC (Allocation Failure)      [ PSYoungGen: 52967K->1240K(89600K) ] 52967K->17272K(294400K), 0.0488906 secs ] [ Times: user=1.17 sys=0.00, real=0.05 secs ]
          [ GC (Allocation Failure)      [ PSYoungGen: 62801K->1080K(89600K) ] 214040K->152319K(294400K), 0.0262948 secs ] [ Times: user=0.30 sys=0.02, real=0.03 secs ]
          [ GC (Allocation Failure)      [ PSYoungGen: 1080K->1048K(89600K) ] 152319K->152287K(294400K), 0.0300708 secs ] [ Times: user=0.31 sys=0.02, real=0.03 secs ]
          [ Full GC (Allocation Failure) [ PSYoungGen: 1048K->0K(89600K) ] [ ParOldGen: 151239K->81797K(204800K) ] 152287K->81797K(294400K), [ Metaspace: 3492K->3492K(1056768K) ], 0.2752555 secs ] [ Times: user=1.31 sys=0.00, real=0.28 secs ]
          [ Full GC         (Ergonomics) [ PSYoungGen: 1536K->0K(89600K) ] [ ParOldGen: 203483K->122359K(204800K) ] 205019K->122359K(294400K), [ Metaspace: 3492K->3492K(1056768K) ], 0.4165691 secs ] [ Times: user=2.98 sys=0.08, real=0.42 secs ]
          [ GC (Allocation Failure)      [ PSYoungGen: 0K->0K(89600K) ] 122359K->122359K(294400K), 0.0007324 secs ] [ Times: user=0.00 sys=0.00, real=0.00 secs ]
          [ Full GC (Allocation Failure) [ PSYoungGen: 0K->0K(89600K) ] [ ParOldGen: 122359K->122340K(204800K) ] 122359K->122340K(294400K), [ Metaspace: 3492K->3492K(1056768K) ], 0.4266590 secs ] [ Times: user=3.27 sys=0.05, real=0.43 secs ]
          "
      verbose:gc/PrintGC日志:
        - "
        7278K 回收前堆大小
        6750K 回收后堆大小
        9216K 当前堆的总大小
        [GC (Allocation Failure)  7278K->6750K(9216K), 0.0009638 secs]
        [Full GC (Ergonomics)  7949K->2949K(9216K), 0.0195486 secs]
        "
    GC日志文件分析: "
        -Xloggc:D:/gc.log GC日志文件的输出路径
         常用工具:
          GCViewer
            https://github.com/chewiebug/GCViewer
          GC Easy
            https://gceasy.io/
          GCHisto，GCLogViewer，HPmeter，grabagecat等。"
    dump文件(堆转储快照文件)分析获取的3种方式:
      jmap方式: jmap -dump:format=b,live,file=test1.hprof 2680
      visualvm方式: 监视选项 -> 右上角找到dump按钮 -> 左边栏目找到dump文件另存为
      使用参数方式:
        - 在程序出现OOM(意味着之前出现过GC，所以只有存活对象)的时候生成堆转储快照文件(dump文件) -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:/abc.hprof
        - 在程序出现FullGC 之前生成堆转储文件 -XX:+HeapDumpBeforeFullGC -XX:HeapDumpPath=D:/abc.hprof
      MAT方式: File -> Acquire Heap Dump
    对dump文件(堆转储快照文件)的溯源:
      MAT与查看GC Roots溯源:
        - 1。需要准备dump文件
        - 2.打开MAT工具 -> Open Query Browser -> Java Basics -> GC Roots
      JProfiler查看GC Roots溯源:
        - idea集成JProfiler,直接运行 -> Live Memory -> All Object
                                                        -> View -> Mark Current Value
                                                        -> 手动触发Run GC观察对象变化
    如何解决OOM?:
      - 要解决OOM异常或，一般的手段是首先通过内存映像分析工具，如（Eclipse-MAT）工具，对dump出来的堆转存快照进行分析，重点是确认内存中的对象是否是必要的，也就是先分清楚到底是出现了内存泄漏，还是内存溢出
      - 如果是内存泄漏，可以进一步通过工具查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象是通过怎样的路径与GC Roots相关联并导致GC无法自动回收它们的。
      - 掌握了泄漏对象的类型信息，以及GC Roots引用链的信息，就可以比较准确的定位出泄漏代码的位置
      - 如果不存在内存泄漏，换句话说就是内存中的对象却是都还必须存活的，那就应当检查虚拟机的堆参数(-Xms20m -Xmx20m),与机器物理内存对比砍是否可以调大，从代码手上检查是否存在某些对象声明周期过长，
      - 持有状态时间过长的情况，尝试减少程序运行期的内存消耗
      - 如果dump文件没有堆溢出的情况，需要考虑一下是否是直接内存引起的OOM
    如何选择垃圾回收器:
      GC使用场景使用总结:
        - 单核CPU场景，选择Serial GC = (Serial GC + Serial Old GC)
        - 多核CPU+吞吐量场景，选择 Parallel GC = (Parallel Scavenge GC + Parallel Old GC)
        - 多核CPU+低延迟场景，选择CMS = (ParallelNew GC + Concurren Mark Sweep GC)
        - 多核CPU+低延迟场景+吞吐量场景+内存大于6GB场景，选择G1
      建议:
        - 1.优先调整堆大小让JVM自适应完成。
        - 2.如果内存小于100M，使用串行收集器
        - 3.如果是单核，单机程序，并且没有停顿时间的要求，串行收集器
        - 4.如果是多核CPU，需要高吞吐量，允许暂停时间超过1秒，选择并行收集器或者JVM自己选择
        - 5.如果是多核CPU，追求底暂停时间，需要快速响应(比如延迟不能超过1秒，互联网应用)，使用并发收集器。(CMS+ParNew)或者G1
        - 6.现有互联网的项目，基本都是使用G1，在满足暂停时间的同时，尽可能提高最大吞吐量






