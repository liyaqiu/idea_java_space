官方文档: https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-6.html#jvms-6.5.astore_n
字节码指令格式:
  - Java字节码对于虚拟机，就好像汇编语言对于计算机，属于基本执行指令。
  - Java虚拟机的指令，由一个字节长度的代表着某种特定操作含义的数字(称为操作码)，以及跟随其后的0个或多个代表此操作所需的参数(称为操作数)而构成。
  - 由于限制了Java虚拟机操作码的长度为1个字节(0-255)，这意味这jvm指令集的操作码总数不能超过256个。
  - Java虚拟机的指令由一个字节长度的，代表着某种特定的操作含义的操作码，以及跟随其后的0个或多个代表此操作所需的参数的操作数所构成。
  - 特殊指令 = 操作码(astore_0)
  - 普通指令 = 操作码+操作数(astore 5)
  - 操作码占1字节，操作数占2个字节
  - 从不同维度看指令 astore_0 = 75 (0x4b)
        从操作码层面看 astore_0
        从字节码10进制看 75
        从字节码十六进制层面看 0x4b
执行引擎执行字节码的伪代码: "
    do{
        程序计数器+1;
        根据程序计数器的位置，从字节码流中取出操作码;
        if(字节码存在操作数)从字节码流中取出操作数;
        执行操作码所定义的操作;
    }while(字节码长度>0);
  "
实际类型于操作码类型转换关系:
  - boolean byte char short = int
  - int = int
  - float = float
  - long = long
  - double = double
操作码:
  入栈与出栈操作码:
    局部变量表入栈:
      - iload 4 将局部变量表中索引为4的int型的值压入操作数栈
      - lload 4 将局部变量表中索引为4的long型的值压入操作数栈
      - fload 4 将局部变量表中索引为4的float型的值压入操作数栈
      - dload 4 将局部变量表中索引为4的double型的值压入操作数栈
      - aload 4 将局部变量表中索引为4的引用类型的值压入操作数栈
      - xload_0,xload_1,xload_2,xload_3
    常量入栈:
      const:
        - iconst_m1 将int型常量-1压入操作数栈
        - iconst_0 将int型常量0压入操作数栈
        - iconst_1 将int型常量1压入操作数栈
        - iconst_2 将int型常量2压入操作数栈
        - iconst_3 将int型常量3压入操作数栈
        - iconst_4 将int型常量4压入操作数栈
        - iconst_5 将int型常量5压入操作数栈
        - lconst_0 将long型常量0压入操作数栈
        - lconst_1 将long整型常量1压入操作数栈
        - fconst_0 将float型常量0压入操作数栈
        - fconst_1 将float型常量1压入操作数栈
        - fconst_2 将float型常量2压入操作数栈
        - dconst_0 将double型常量0压入操作数栈
        - dconst_1 将double型常量1压入操作数栈
        - aconst_null 将引用类型常量null压入操作数栈
      push:
        - bipush (-128~127) 将int型-128~127常量压入操作数栈
        - sipush (-32768~32767) 将int型-32768~32767常量压入操作数栈
      ldc(从运行时常量池压栈):
        - ldc/ldc_w int(>32768) 将int型32768常量压入操作数栈
        - ldc/ldc_w float 将float型的值常量压入操作数栈
        - ldc/ldc_w String 将引用类型的值常量压入操作数栈
        - ldc2_w long 将long型的值常量压入操作数栈
        - ldc2_w double 将double型的值常量压入操作数栈
    出栈到局部变量表:
      - istore 4 将操作数栈的栈顶int型的值弹出，并存储到局部变量表索引为4的位置
      - lstore 4 将操作数栈的栈顶long型的值弹出，并存储到局部变量表索引为4的位置
      - fstore 4 将操作数栈的栈顶float型的值弹出，并存储到局部变量表索引为4的位置
      - dstore 4 将操作数栈的栈顶double型的值弹出，并存储到局部变量表索引为4的位置
      - astore 4 将操作数栈的栈顶引用类型的值弹出，并存储到局部变量表索引为4的位置
      - xstore_0,xstore_1,xstore_2,xstore_3
  算术操作码:
    加法(add):
      - iadd 将操作数栈中的2个int型数据弹出，进行相加，将结果压回栈
      - fadd 将操作数栈中的2个float型数据弹出，进行相加，将结果压回栈
      - ladd 将操作数栈中的2个long型数据弹出，进行相加，将结果压回栈
      - dadd 将操作数栈中的2个double型数据弹出，进行相加，将结果压回栈
    减法(subtract):
      - isub 将操作数栈中的2个int型数据弹出，进行相减，将结果压回栈
      - fsub 将操作数栈中的2个float型数据弹出，进行相减，将结果压回栈
      - lsub 将操作数栈中的2个long型数据弹出，进行相减，将结果压回栈
      - dsub 将操作数栈中的2个double型数据弹出，进行相减，将结果压回栈
    乘法(multiply):
      - imul 将操作数栈中的2个int型数据弹出，进行相乘，将结果压回栈
      - fmul 将操作数栈中的2个float型数据弹出，进行相乘，将结果压回栈
      - lmul 将操作数栈中的2个long型数据弹出，进行相乘，将结果压回栈
      - dmul 将操作数栈中的2个double型数据弹出，进行相乘，将结果压回栈
    除法(divide):
      - idiv 将操作数栈中的2个int型数据弹出，进行相除，将结果压回栈
      - fdiv 将操作数栈中的2个float型数据弹出，进行相除，将结果压回栈
      - ldiv 将操作数栈中的2个long型数据弹出，进行相除，将结果压回栈
      - ddiv 将操作数栈中的2个double型数据弹出，进行相除，将结果压回栈
    取余(remainder):
      - irem 将操作数栈中的2个int型数据弹出，进行取余，将结果压回栈
      - frem 将操作数栈中的2个float型数据弹出，进行取余，将结果压回栈
      - lrem 将操作数栈中的2个long型数据弹出，进行取余，将结果压回栈
      - drem 将操作数栈中的2个double型数据弹出，进行取余，将结果压回栈
    取反(negation):
      - ineg 将操作数栈中的1个int型数据弹出，进行取反，将结果压回栈
      - fneg 将操作数栈中的1个float型数据弹出，进行取反，将结果压回栈
      - lneg 将操作数栈中的1个long型数据弹出，进行取反，将结果压回栈
      - dneg 将操作数栈中的1个double型数据弹出，进行取反，将结果压回栈
      - int i = -100; int b = -i;
    自增(increment):
      - iinc 将局部变量表第n个索引的数值加1
      - int i = 10; i++; 只有这个才使用 iinc
      - float i = 10; i++; 这个不使用
    比较:
      - lcmp  将操作数栈中2个long型数据弹出，进行比较，将结果压回栈
      - fcmpg 将操作数栈中2个float型数据弹出，进行比较，将结果压回栈
      - fcmpl 将操作数栈中2个float型数据弹出，进行比较，将结果压回栈
      - dcmpg 将操作数栈中2个double型数据弹出，进行比较，将结果压回栈
      - dcmpl 将操作数栈中2个double型数据弹出，进行比较，将结果压回栈
      - 正常情况,v1 v2压栈，取出v1 v2，如果v1=v2将0结果压回栈，如果v1>v2将1结果压回栈，如果v1<v2将-1结果压回栈
      - 遇到NaN(not a number),fcmpg压入1，fcmpl压入-1
    位移:
      - ishl
      - ishr
      - iushr
      - lshl
      - lshr
      - lushr
    位或:
      - ior
      - lor
    位与:
      - iand 将操作数栈中的2个int型数据弹出，进行位与，将结果压回栈
      - land 将操作数栈中的2个long型数据弹出，进行位与，将结果压回栈
    位异或:
      - ixor 将操作数栈中的2个int型数据弹出，进行位异或，将结果压回栈
      - lxor 将操作数栈中的2个log型数据弹出，进行位异或，将结果压回栈
  类型转换操作码:
    基本数据类型转换:
      宽化类型转换(精度丢失):
        - i2l 将操作数栈中的int取出来，转化为long类型，在压回操作数栈
        - i2f 将操作数栈中的int取出来，转化为float类型，在压回操作数栈
        - i2d 将操作数栈中的int取出来，转化为double类型，在压回操作数栈
        - l2f 将操作数栈中的long取出来，转化为float类型，在压回操作数栈
        - l2d 将操作数栈中的long取出来，转化为double类型，在压回操作数栈
        - f2d 将操作数栈中的float取出来，转化为double类型，在压回操作数栈
      窄化类型转换(精度丢失):
        - i2b 将操作数栈中的int取出来，转化为byte类型，在压回操作数栈
        - i2c 将操作数栈中的int取出来，转化为char类型，在压回操作数栈
        - i2s 将操作数栈中的int取出来，转化为short类型，在压回操作数栈
        - l2i 将操作数栈中的long取出来，转化为int类型，在压回操作数栈
        - f2i 将操作数栈中的float取出来，转化为int类型，在压回操作数栈
        - f2l 将操作数栈中的float取出来，转化为long类型，在压回操作数栈
        - d2i 将操作数栈中的double取出来，转化为int类型，在压回操作数栈
        - d2l 将操作数栈中的double取出来，转化为long类型，在压回操作数栈
        - d2f 将操作数栈中的double取出来，转化为float类型，在压回操作数栈
    引用类型转换:
      - checkcast 将操作数栈1个元素(对象实例引用)弹出，强制转换，如果可以将转换后的对象引用重新压入操作数栈，如果不可以抛(ClassCastException)
  对象创建与访问操作码:
    对象创建:
      - new 在堆空间创建一个对象实例，并且把对象实例引用压入操作数栈
    类变量:
      - getstatic 将(类变量值/引用)压入操作数栈
      - putstatic 将1个元素(常量值)弹出操作数栈，并且赋值给类变量
    实例变量:
      - getfield 将1个元素(对象实例引用)弹出操作数栈，通过对象实例引用获取到实例变量，并且将(实例变量值/引用)压入操作数栈
      - putfield 将2个元素(对象实例引用/常量值)弹出操作数栈，通过对象实例引用获取到实例变量，并且将常量值赋值给实例变量。
    数组相关:
      数组创建:
        - newarray 将1个元素(数组大小常量)弹出操作数栈，在堆空间创建一个基本类型数组对象实例，并且把基本类型数组对象实例引用压入操作数栈
        - anewarray 将1个元素(数组大小常量)弹出操作数栈，在堆空间创建一个引用类型数组对象实例，并且把引用类型数组对象实例引用压入操作数栈
        - multianewarray 将N个元素(数组大小常量)弹出操作数栈，在堆空间创建一个多维数组对象实例，并且把多维数组对象实例引用压入操作数栈
      数组获取操作:
        - baload 将2个元素(数组索引值/数组引用)弹出操作数栈，并且通过数组索引值和数组引用获取到具体值，并将具体值压入到操作数栈 (byte/boolean)
        - caload 将2个元素(数组索引值/数组引用)弹出操作数栈，并且通过数组索引值和数组引用获取到具体值，并将具体值压入到操作数栈 (char)
        - saload 将2个元素(数组索引值/数组引用)弹出操作数栈，并且通过数组索引值和数组引用获取到具体值，并将具体值压入到操作数栈 (short)
        - iaload 将2个元素(数组索引值/数组引用)弹出操作数栈，并且通过数组索引值和数组引用获取到具体值，并将具体值压入到操作数栈 (int)
        - laload 将2个元素(数组索引值/数组引用)弹出操作数栈，并且通过数组索引值和数组引用获取到具体值，并将具体值压入到操作数栈 (long)
        - faload 将2个元素(数组索引值/数组引用)弹出操作数栈，并且通过数组索引值和数组引用获取到具体值，并将具体值压入到操作数栈 (float)
        - daload 将2个元素(数组索引值/数组引用)弹出操作数栈，并且通过数组索引值和数组引用获取到具体值，并将具体值压入到操作数栈 (double)
        - aaload 将2个元素(数组索引值/数组引用)弹出操作数栈，并且通过数组索引值和数组引用获取到具体值，并将具体值压入到操作数栈 (引用类型)
      数组赋值操作:
        - bastore 将3个元素(具体值/数组索引值/数组引用)弹出操作数栈，并且对堆空间的数组(byte/boolean)赋值
        - castore 将3个元素(具体值/数组索引值/数组引用)弹出操作数栈，并且对堆空间的数组(char)赋值
        - sastore 将3个元素(具体值/数组索引值/数组引用)弹出操作数栈，并且对堆空间的数组(short)赋值
        - iastore 将3个元素(具体值/数组索引值/数组引用)弹出操作数栈，并且对堆空间的数组(int)赋值
        - lastore 将3个元素(具体值/数组索引值/数组引用)弹出操作数栈，并且对堆空间的数组(long)赋值
        - fastore 将3个元素(具体值/数组索引值/数组引用)弹出操作数栈，并且对堆空间的数组(float)赋值
        - dastore 将3个元素(具体值/数组索引值/数组引用)弹出操作数栈，并且对堆空间的数组(double)赋值
        - aastore 将3个元素(具体值/数组索引值/数组引用)弹出操作数栈，并且对堆空间的数组(引用类型)赋值
      数组长度:
        - arraylength 将1个元素(数组引用)弹出操作数栈，通过数组引用获取到数组长度的具体值，并且将具体值压到操作数栈
    类型检查:
      - instanceof 将1个元素(对象实例引用)弹出操作数栈，判断其是否属于该类型，并且将结果(0/1,true/false)压入操作数栈
  方法调用与返回操作码:
    方法调用:
      invokestatic:
        - 静态方法
        - 将N个元素(N个参数值)弹出操作数栈，创建一个新的栈帧，如果有结果，则需要把结果压入操作数栈，如果没有则不需要。
      invokespecial:
        - 构造方法（<init>），私有方法，父类方法
        - 将N和元素(对象引用+N个参数值)弹出操作数栈，创建一个新的栈帧，如果有结果，则需要把结果压入操作数栈，如果没有则不需要。
      invokevirtual:
        - 公共方法，重写公共方法
        - 将N和元素(对象引用+N个参数值)弹出操作数栈，创建一个新的栈帧，如果有结果，则需要把结果压入操作数栈，如果没有则不需要。
      invokeinterface:
        - 接口方法
        - 将N和元素(对象引用+N个参数值)弹出操作数栈，创建一个新的栈帧，如果有结果，则需要把结果压入操作数栈，如果没有则不需要。
      invokedynamic:
        - jdk1.8 动态解析出需要调用的方法，然后执行,具体代表lambda
    方法返回:
      - ireturn 将1个元素(boolean/byte/char/short/int类型数据)弹出操作数栈，返回给调用者操作数栈
      - lreturn 将1个元素(long类型数据)弹出操作数栈，返回给调用者操作数栈
      - freturn 将1个元素(float类型数据)弹出操作数栈，返回给调用者操作数栈
      - dreturn 将1个元素(double类型数据)弹出操作数栈，返回给调用者操作数栈
      - areturn 将1个元素(引用类型数据)弹出操作数栈，返回给调用者操作数栈
      - return
  与返回操作码:
  操作数栈管理操作码:
  比较控制操作码:
  异常处理操作码:
  同步控制操作码:



方法的返回操作码:
  ireturn: boolean,byte,char,short,int
  freturn: float
  lreturn: long
  dreturn: double
  areturn: 引用类型 String Date
  return: void
