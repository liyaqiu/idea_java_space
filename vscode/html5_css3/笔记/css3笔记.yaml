CSS官方:
  - 官方 https://www.w3school.com.cn/h.asp
  - photoshop 快速导出图层插件 https://www.cutterman.cn/zh/cutterman
  - 字体图标 https://icomoon.io/#icons
  - 字体图标 https://www.iconfont.cn/
CSS介绍:
  - CSS(Cascading Style Sheets)层叠样式表
  - CSS最大价值是，HTML元素专注做结构，CSS专注做元素样式，达到元素和样式分离
  - CSS样式的声明和使用是严格区分大小写的
CSS组成部分: 选择器名+花括号 === #bt{}
CSS编写规范:
  - 布局定位相关属性 display/position/float/clear/visibility/overflow
  - 自身属性 width/height/margin/padding/border/background
  - 文本属性 color/font/text-decoration/text-align/vertical-align/white-space/break-word
  - 其他属性(CSS3) content/cursor/border-radius/box-shadow/text-shadow/backrground:linear-gradient
初级:
  选择器分类:
    基础选择器:
      id选择器:
        - 规则声明，如果定义了id选择器样式，只允许一个标签调用，其他标签不允许在次调用
        - "#my_unique_style{}"
        - "
            <style>
               #sty1{
                    width: 100px;
                    height: 100px;
                    color: red;
                    font-size: 30px;
               }

               #sty2{
                    height: 100px;
                    color: rgb(111, 0, 255);
                    font-size: 30px;
               }
            </style>
            <span id='sty1'>good friends</span><br>

            <div id='sty2'>我们都是好朋友</div>
            "
      类选择器:
        - 规则声明，允许被多个标签多次使用
        - .mystyle{}
        - 元素支持同时声明多个类名 <div class="box green"></div>
        - "
          <style>
             .sty1{
                  color: red;
                  font-size: 30px;
             }
             .sty2{
                  color: rgb(119, 0, 255);
                  font-size: 10px;
             }

             <span class='sty1'>good friends</span><br>
             <span class='sty1'>good friends</span><br>
             <span class='sty2'>good friends</span><br>
             <span class='sty2'>good friends</span><br>

             <div class='sty1'>我们都是好朋友</div>
             <div class='sty1'>我们都是好朋友</div>
             <div class='sty2'>我们都是好朋友</div>
             <div class='sty2'>我们都是好朋友</div>
          </style>
        "
      标签选择器:
        - div{}
        - "
            <style>
                span {
                    color: rgba(36, 36, 34, 0.432);
                    font-size: small;
                }
                div {
                    color: burlywood;
                    font-size: 20px;
                }
            </style>

            <span>good friends</span><br>
            <span>good friends</span><br>
            <span>good friends</span><br>
            <span>good friends</span><br>

            <div>我们都是好朋友</div>
            <div>我们都是好朋友</div>
            <div>我们都是好朋友</div>
            <div>我们都是好朋友</div>
          "
      通配符选择器:
        - "*{} 包括 html head body title meta 反正页面所有标签元素"
        - "
          * {
            height: 100px;
            color: red;
            font-size: 30px;
          }
          <span >good friends</span><br>
          <span >good friends</span><br>
          <span >good friends</span><br>

          <div >我们都是好朋友</div>
          <div >我们都是好朋友</div>
          <div >我们都是好朋友</div>
        "
      屬性选择器:
        - "
        /* [aaa] {
            color: red;
        } */
        [aaa='111'] {
            color: red;
        }

        <div aaa='111'>1</div>
        <div aaa='111'>1</div>
        <div aaa='222'>1</div>
        "
    复合选择器:
      功能:
        - 复合选择器是由多个基础选择器组合而成
      后代选择器(空格)+子代选择器(>):
        - 后代选择器可以跨域级别去选择任意一级子标签
        - 子选择器只能一级一级往下找，子选择器比较精确，不容易越级
        - 后代选择器可以结合子选择器一起使用
        - "
          /* 后代选择器 */
          div li{
              color: red;
          }

          /* 子选择器 */
          div > span > ul > li {
              font-weight: 700;
          }

          /* 后代选择器+子选择器 */
          div > span li{
              font-size: 30px;
          }

          <div>
              <span>
                  <ul>
                      <li>1</li>
                      <li>1</li>
                      <li>1</li>
                  </ul>
              </span>
          </div>
        "
      伪类选择器(冒号):
        - 伪类选择器一般需要跟在基础选择器屁股使用
        - "
          案例1
          a {
              color: rgb(176, 173, 168);
              text-decoration: none;
          }

          div a:hover {
              color: rgb(228, 29, 29);
              text-decoration: underline;
          }

          /* 如果全部写，一定要按照lvha顺序下，否则可能不生效 */
          /* 未访问过 a:link*/
          /* 已访问过 a:visited*/
          /* 鼠标划过 a:hover*/
          /* 鼠标按下 a:active*/


          <a href='#'>百度</a>
          <a href='#'>新浪</a>
          <div>
              <a href='#'>百度</a>
              <a href='#'>新浪</a>
          </div>
        "
        - "
          案例2
          body > div > .bt:focus {
              background-color: antiquewhite;
          }

          <div>
              <input class='bt' type='text' >
              <input class='bt' type='text'>
          </div>

          <div>
              <div>
                  <input class='bt' type='text' >
                  <input class='bt' type='text'>
              </div>
          </div>

          <input class='bt' type='text' >
          <input class='bt' type='text'>
        "
      交集选择器:
        - "
          案例1
          <style>
             div.ca.box{
               color: red;
             }
          </style>
          <div  class='box ca'>1</div>
          <p  class='box ca'>2</p>
        "
        - "
          案例2
          /* 交集选择器 = 标签选择器+属性选择器 */
          /* div[a] {
             color: red;
          } */

          /* 交集选择器 = 标签选择器+属性选择器 */
          /* div[a='a2'] {
             color: red;
          } */

          /* 交集选择器 = 标签选择器+类选择器+属性选择器+类选择器 */
          p.box[a='a2'].ca{
             color: red;
          }

         <div class='box ca1' a='a1'>1</div>
         <div class='box ca1' a='a1'>1</div>

         <div class='box ca' a='a2'>2</div>
         <div class='box ca' a='a2'>2</div>

         <p class='box ca' a='a2'>3</p>
         <p class='box ca' a='a2'>3</p>
        "
      并集选择器(逗号)(同时声明多个选择器):
        - 可以将任意选择器一起使用，例如 let a,b,c ;
        - 一个逗号为一种选择器
        - "
                <style>
                   body > div  div,span,a,p {
                        color: red;
                   }
                </style>
                <div>1</div>
                <span>1</span>
                <div>
                    <div>1</div>
                    <span>1</span>
                    <span>1</span>
                    <div>1</div>
                </div>
                <span>1</span>
                <div>1</div>
              "
    复合选择器总结:
      - 空格后代任意一个
      - ">下一个"
      - 连着写当前标签找
      - 冒号，给当前标签配上伪类选择器
      - 逗号是声明多个
      - "
        #div div > .abc > div[a][b][c][d='1']#a1.a2 > input#abc.bcd[class='bcd efg'].efg:focus {
            background-color: rgb(240, 17, 88);
        }
        <div id='div'>
          <div>
              <div>
                  <div class='abc'>
                      <div a b c d='1' id='a1' class='a2'>
                          <input type='text' name='' class='bcd efg' id='abc'>
                      </div>
                      <div a b c d='2'>
                          <input type='text' name='' id=''>
                      </div>
                  </div>
              </div>
              <div class='abc'>
                  <div a b c d='1' id='a1' class='a2'>
                      <input type='text' name='' class='bcd efg' id='abc'>
                  </div>
                  <div a b c d='2'>
                      <input type='text' name='' id=''>
                  </div>
              </div>
          </div>
      </div>
      "
  标签元素分类:
    功能: "
        display: block; 转换为块元素
        display: inline; 转换为行内元素
        display: inline-block; 转换为行内块元素
      "
    块元素:
      功能:
        - "<h1-h6> <p> <ul> <ol> <li> <div> 等，其中<div>是最典型的块元素"
      特点:
        - 独占一行
        - 高度、宽度、外边距、内边距都可以设置
        - 宽度默认是父级容器宽度的100%
        - 是一个容器，里面可以放行内元素或者块元素
      例外:
        - 文字类的元素内不能使用块元素
        - <p>标签主要用于存放文字，因此<p>标签里面不能放块元素，特别是不能放<div>
        - 同理<h1-h6>都是文字类块元素，里面也不能放其他块元素
    行内元素:
      功能:
        - "<a> <strong> <b> <em> <i> <del> <s> <ins> <u> <span>等，其中<span>是最典型的块元素"
      特点:
        - 多个可以在同一行上显示，但是它们之间会有空白间隙。
        - 高度、宽度设置是无效的
        - 默认宽度就是它本身内容的宽度
        - 行内元素只能容纳文本或其他行内元素
      例外:
        - <a>标签里面不能再放<a>标签
        - <a>标签里面可以放块元素，但是给<a>转换一下块元素模块最安全
    行内块元素:
      功能:
        - "<img> <input> <button> <td> 它们同时具备行内元素特点，和块元素特点"
      特点:
        - 多个可以在同一行上显示，但是它们之间会有空白间隙。(行内元素特点)
        - 默认宽度就是它本身内容的宽度(行内元素特点)
        - 高度、宽度、行高。外边距、内边距都可以设置(块元素特点)
  CSS的3种样式表:
    - "外部样式表 <link rel='stylesheet' href='./abc/mystyle.css'>"
    - "内部样式表 <style></style>"
    - "行内样式表 <div style='color: green;'>我们都是好朋友 frends</div>"
  CSS的三大特性:
    重叠性:
      - 当权重一样时，后者声明的相同样式会覆盖前者相同的样式。
      - "
        #ps {
          color: red;
          font-size: 30px;
         }
        #ps {
          color:aqua
        }
      "
    继承性:
      - 子元素会继承父元素的【部分不相同的样式】，不一定全部样式都继承
      - 例如，文本样式和字体样式相关的可能会继承
    优先级之权重计算:
      - 样式的优先级取决于1个或多个选择器的权重之和
      - "
        通配符选择器、继承 < 标签选择器 < 属性、伪类、类选择器 < ID选择器 < 行内样式 < !important
          ! important - - - infinity
          行内样式 - - - 1,0,0,0
          ID选择器 - - - 0,1,0,0
          属性、伪类、类选择器 - - - 0,0,1,0
          标签选择器 - - - 0,0,0,1
          通配符选择器、继承 - - - 0,0,0,0
        复合选择器计算权重是累个相加，紧急不会进位
        权重进行比较的时候，逐位进行比较，如果第1位比较大，那么就不往下继续比较了
        !important对继承样式无效，只能对本身元素有效
          div div div div div div div div div div div {}
              权重为 0,0,0,11
          #div div > .abc > div[a][b][c][d='1']#a1.a2 > input#abc.bcd[class='bcd efg'].efg:focus {}
              权重为
              0,1,0,0
              0,0,0,1
              0,0,1,0
              0,0,0,1
              0,0,1,0
              0,0,1,0
              0,0,1,0
              0,0,1,0
              0,1,0,0
              0,0,1,0
              0,0,0,1
              0,1,0,0
              0,0,1,0
              0,0,1,0
              0,0,1,0
              0,0,1,0
              0,3,10,3

      "
    案例:
      - "
        <style>
            /* 继承或者* < 标签选择器 < 类选择器、伪类选择器 < 属性选择器 < ID选择器 < 标签行内样式(style='') < !important */
            body {
                color: red;
                font-size: 300px;
            }

            span {
                color: rgb(0, 217, 255);
            }

            .sp{
                color: bisque;
            }

            [class][id]{
                color: yellow!important;
            }

            #sp{
                color: brown!important;
            }
        </style>
        <span class='sp' id='sp' style='color: green!important;'>我们</span>
      "
  字体样式:
    - "
      /* 设置字体系列 */
      /* font-family: '宋体', '微软雅黑'; */

      /* 设置字体大小 */
      /* font-size: 16px; */

      /* 设置字体加粗 */
      /* font-weight: 700; */

      /* 设置字体样式 正体或者斜体*/
      /* font-style: italic; */

      /* 复合属性不能更改顺序 [font-style] [font-weight] font-size/[line-height]  font-family*/
      font: italic 700 18px '宋体'
      /* font: 18px '宋体' */
    "
  文本样式:
    - "
      div {
          /* 文本颜色 */
          color: rgb(107, 99, 99);

          /* 文本对齐 */
          text-align: center;

          /* 文本装饰 去掉下划线 */
          text-decoration: underline;

          /* 文本首行缩进 如果当前一个文字大小为16px，那么2em=16x2*/
          text-indent: 2em;

          /*
              行间距/行膏 = 文字上间距 + 文字大小 + 文字下边距
                   26px  =  5px   +   16px  + 5px
          */
          line-height: 26px;

          border: solid red;
      }

      <div>我们都是好朋友 frends</div><br>
      <div>我们都是好朋友 frends</div><br>
      <div>我们都是好朋友 frends</div><br>
    "
  背景样式:
    - "
      <style>
         span {
              display: block;
              width: 500px;
              height: 500px;

              /* 背景颜色  css3支持rgba颜色*/
              background-color: rgba(92, 13, 219, 0.6);;

              /* 设置背景图片 */
              background-image: url('https://img2.baidu.com/it/u=2965709842,4091470419&fm=253&fmt=auto&app=138&f=JPEG?w=140&h=140');

              /* 设置平铺图片 */
              background-repeat: no-repeat;

              /*
                  background-position: x y
                  方位名词 x(left center right) y(top center bottom)
                  精确单位 0px 0px
                  背景图片方位名词 xy没有严格顺序，背景图片精确单位 xy有严格顺序
                  如果只写一个参数，则第二个参数为center居中
              */
              background-position: center center;
              /* background-position: 0px 0px; */



              /* 复合属性 */
              /* background: [背景颜色] [背景图片地址] [背景平铺] [背景图片滚动] [背景图片位置]; */
         }
         body {
          background-image: url(1.jpg);
          background-position: -1200px -1800px;
          background-repeat: no-repeat;

          /* 图片贴附效果
              fixed 不会随着滚动条的滚动而滚动
              scroll 默认会滚动
           */
          background-attachment: fixed;
         }
      </style>

       <span></span>
       <span></span>
       <span></span>
       <span></span>
       <span></span>
       <span></span>
       <span></span>
       <span></span>
    "
  反人类选择器问题:
     功能:
       - 把事件绑定在别人身上，通过别人来唤醒自己
    案例1:
      - "
        <style>
            .box {
                width: 300px;
                height: 300px;
                background-color: rgb(156, 131, 135);
            }

            .div1 {
                display: none;
                width: 200px;
                height: 200px;
                background-color: pink;
            }

            .div2 {
                display: none;
                width: 100px;
                height: 100px;
                background-color: rgb(75, 70, 71);
            }

            /* 把事件绑定在别人身上，通过别人来唤醒自己 */
            .box:hover > .div1 {
                display: block;
            }

            .box .div1:hover > .div2 {
                display: block;
            }
        </style>
        <div class='box'>
            <div class='div1'>
                <div class='div2'>

                </div>
            </div>
        </div>
    "
    案例2:
      - "
        <style>
            * {
                margin: 0;
                padding: 0;
            }

            a {
                text-decoration: none;
                color: black;
                font-size: 14px;
            }

            li {
                list-style: none;
            }

            .box {
                width: 700px;
                height: 50px;
                margin: 100px auto 0;
                background-color: pink;
            }

            .box>ul>li {
                float: left;
                width: 100px;
                height: 50px;
                text-align: center;
                line-height: 50px;
                /* background-color: antiquewhite; */
            }

            .box ol li {
                width: 100px;
                text-align: center;
            }

            .nav {
                position: relative;
            }

            .nav ol {
                display: block;
                background-color: blanchedalmond;
                position: absolute;
                left: 0px;
                right: 0px;
                display: none;
            }

            .nav:hover ol {
                display: block;
            }
        </style>
        <div class='box'>
            <ul>
                <li>
                    <div class='nav'>
                        <a href='#'>衣服</a>
                        <ol>
                            <li><a href='#'>衣服1</a></li>
                            <li><a href='#'>衣服1</a></li>
                            <li><a href='#'>衣服1</a></li>
                            <li><a href='#'>衣服1</a></li>
                            <li><a href='#'>衣服1</a></li>
                            <li><a href='#'>衣服1</a></li>
                            <li><a href='#'>衣服1</a></li>
                        </ol>
                    </div>
                </li>
                <li>
                    <div class='nav'>
                        <a href='#'>衣服2</a>
                        <ol>
                            <li><a href='#'>衣服2</a></li>
                            <li><a href='#'>衣服2</a></li>
                            <li><a href='#'>衣服2</a></li>
                            <li><a href='#'>衣服2</a></li>
                            <li><a href='#'>衣服2</a></li>
                            <li><a href='#'>衣服2</a></li>
                            <li><a href='#'>衣服2</a></li>
                        </ol>
                    </div>
                </li>

            </ul>
        </div>
      "
中级:
  功能:
    - 页面布局三大核心，盒子模型、浮动、定位
    - 一个完整的网页是由标准流、浮动、定位搭配完成的
  盒子模型:
    功能:
      - 外边距(margin)、边框(border)、内边距(padding)、内容区域(centent)
      - 块元素和行内块元素可以作为盒子使用，行内元素不能作为盒子使用
      - 盒子宽 = 边框左右宽+内边距左右宽+内容区域宽
      - 盒子高 = 边框上下高+内边距上下高+内容区域高
    边框:
      基本使用:
        - "
        <style>
            a {
                display: block;
                text-decoration: none;
                font-size: 30px;

                width: 300px;
                height: 300px;

                /* 边框的大小 */
                border-width: 5px;
                /* 边框的样式 默认为none */
                border-style: solid;
                /* 边框的颜色 */
                border-color: pink;

                /*
                    边框复合样式写法，没有先后顺序
                    border: 5px solid red;
                */
                /*
                    可以针对边框的 top bottom left right 设置
                    border-top-width: 10px;
                    border-top-style:dashed;
                    border-top-color:black;

                    边框复合样式写法，没有先后顺序
                    border-top: 5px solid red;
                */
            }
        </style>
        <a href='#'>大家好！</a>
      "
      表格边框合并使用:
        - "
          table,
          th,
          td {
              border-width: 1px;
              border-style: solid;
              border-color: pink;

              /* 控制浏览器绘制表达边框的方式，将相邻的框架进行合并 */
              border-collapse: collapse;
          }
        "
      圆角边框使用:
        - "
        圆角边框边框属性
        <style>
           .div1 {
            width: 300px;
            height: 300px;
            background-color: pink;
            margin: 30px auto;

            /* 圆形边框，设置高度和宽度的一半*/
            border-radius: 150px;
            /* 等价于 高度和宽度的一半 */
            /* border-radius: 50%; */
           }

           .div2 {
            width: 300px;
            height: 100px;
            background-color: pink;
            margin: 30px auto;

            /* 椭圆边框，设置高度的一半*/
            border-radius: 50px;
            /* 等价于 高度和宽度的一半 */
            /* border-radius: 50%; */


            /* border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            border-bottom-left-radius: 10px;
            border-bottom-right-radius: 10px; */
           }
        </style>
        <div class='div1'></div>
        <div class='div2'></div>
      "
    内边距:
      - "
        <style>
            div {
                height: 100px;
                width: 100px;
                background-color: pink;

                border: 10px solid red;

                text-align: center;
                line-height: 100px;

                /* 内边距 */
                padding-left: 10px;
                padding-right: 10px;
                padding-top: 10px;
                padding-bottom: 10px;


                /* 复合样式写法 */
                /* 上下左右 */
                /* padding: 10px; */
                /* 上下 左右 */
                /* padding: 10px 20px; */
                /* 上 左右 下 */
                /* padding: 10px 20px 30px; */
                /* 上  右 下 左 */
                /* padding: 10px 20px 30px 40px; */
            }
        </style>
        <div>1</div>
      "
    外边距:
      - 外边距用来控制盒子与盒子之间的距离
      - "
        <style>
            div {
                height: 100px;
                width: 100px;
                background-color: pink;

                border: 10px solid red;

                text-align: center;
                line-height: 100px;

                padding: 10px;

                /* 内边距 */
                margin-left: 10px;
                margin-right: 10px;
                margin-top: 10px;
                margin-bottom: 10px;


                /* 复合样式写法 */
                /* 上下左右 */
                /* margin: 10px; */
                /* 上下 左右 */
                /* margin: 10px 20px; */
                /* 上 左右 下 */
                /* margin: 10px 20px 30px; */
                /* 上  右 下 左 */
                /* margin: 10px 20px 30px 40px; */
            }
        </style>
        <div>1</div>
        <div>1</div>
      "
  水平居中:
    块元素:
      - "
        /* 块元素居中，方式一 */
        /* width: 200px;
        margin-left: auto;
        margin-right: auto; */

        /* 块元素居中，方式二 */
        /* width: 200px;
        margin: auto; */

        /* 块元素居中，方式三 */
        width: 500px;
        margin: 0px auto;
      "
    行内元素&行内块元素&文字内容:
      - "
        /* 行内元素 行内块元素 以及内容都需要找它父亲来做居中 */
        text-align: center;
      "
  垂直居中:
    行内元素&行内块元素&文字内容:
      - "
        /* 指定行高可以实现水平居中 */
        line-height: 500px;
      "
  行内元素: 只允许设置【左右内边距】和【左右外边距】，块元素和行内块元素不限制
  清除所有元素默认的外边距和内边距:
    - "
      * {
        margin: 0px;
        padding: 0px;
      }
    "
  盒子阴影与文字阴影样式:
    - "
      <style>
          div {
              width: 300px;
              height: 300px;
              background-color: rgba(224, 80, 80, 0.5);
              /*
                  语法 box-shadow: 水平像素 垂直像素 [模糊像素] [阴影尺寸] [阴影颜色] [外部阴影值inset];
                  阴影不占位置，默认为外部阴影，但不能使用outset
              */
              box-shadow: 10px 10px 10px 10px rgba(0, 0, 0, 0.5)
          }

          p {
             /* 语法  text-shadow: 水平像素 垂直像素 [模糊像素] [阴影颜色]  ; */
             text-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
          }
      </style>
      <div>盒子阴影</div>
      <p>文字阴影</p>
    "
  浮动:
    功能:
      - 浮动元素会脱离标准流布局方式(脱标)。简单来说，浮动的盒子不在保留原先的位置，盒子会浮动起来，往左边缘或右边缘对齐
      - 浮动的元素会一行内显示，并且元素顶部对齐。简单来说，浮动元素是相互贴在一起，不会产生中间缝隙，但是如果父级宽度装不下这些浮动的盒子时，多出来的盒子会另起一行对齐
      - 浮动的元素会具有行内块元素的特性。简单来说，任何元素都可以添加浮动，一旦添加了浮动就会具有【行内块元素相似的特性】
    个人功能总结:
      - 浮动不占位置(脱标)
      - 浮动可以让多个块元素在同一行显示，
      - 浮动可以让行内元素和行内块元素中间缝隙消失
      - 紧记一句话，在同盒子中，最好保持一浮全浮，以免产生一些奇怪问题
    测试案例:
      - "
        <style>
          .div1 {
             width: 300px;
             height: 300px;
             background-color: antiquewhite;
          }

          .div2 {
             float: left;
             width: 400px;
             height: 400px;
             background-color: rgb(158, 106, 38);
          }

          .div2>div {
             float: left;
             width: 100px;
             height: 100px;
             background-color: pink;
          }

          .div3 {
             width: 500px;
             height: 500px;
             background-color: rgb(16, 16, 16);
          }
       </style>
       <div class='div1'></div>
        <div class='div2'>
           <div>1</div>
           <div>2</div>
           <div>3</div>
        </div>
        <div class='div2'>
           <div>1</div>
           <div>2</div>
           <div>3</div>
        </div>
        <div class='div3'></div>
        <div class='div2'>
           <div>1</div>
           <div>2</div>
           <div>3</div>
        </div>
      "
  定位:
    功能:
      - 定位是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子
      - 行内元素一旦添加了绝对定位和固定就会具有【行内块元素相似的特性】
      - 定位 = 定位模式 + 边偏移 + z-index
    常用的搭配定位模式:
      - 子元素用绝对定位，父元素用相对定位(子绝父相)
    定位模式:
      静态定位:
        功能:
          - static
          - 静态定位是元素的默认定位方式，静态定位按照标准流特性摆放位置，它没有偏移属性
      相对定位:
        功能:
          - relative
          - 相对定位保留原来的位置(不脱标)
          - 相对定位是根据自己原来的位置为基准进行偏移
        案例:
          - "
            <style>
                div {
                    height: 500px;
                    background-color: antiquewhite;
                }

                div>div {
                    float: left;
                    height: 300px;
                    width: 300px;
                    background-color: pink;
                }
                .div2 {
                    position:relative;
                    left: 100px;
                    top: 300px;
                    background-color: rgb(123, 35, 49);
                }
            </style>
            <div class='div1'>
                <div class='div2'>
                    1
                </div>
                <div>2</div>
                <div>3</div>
            </div>
          "
      绝对定位:
        功能:
          - absolute
          - 绝对定位不保留原来的位置(脱标)
          - 绝对定位是根据父亲或者祖宗(Document文档)的位置为基准进行偏移，并且父亲一定要有定位(相对，绝对，固定)
        案例:
          - "
            <style>
                div {
                    /* 如果不开启父亲的定位，则子元素会继续往上找定位，直到document上 */
                    position: relative;
                    height: 500px;
                    width: 1200px;
                    margin: 0 auto;
                    background-color: antiquewhite;
                }

                div>div {
                    float: left;
                    height: 300px;
                    width: 300px;
                    background-color: pink;
                }
                .div2 {
                    position:absolute;
                    left: 100px;
                    top: 300px;
                    background-color: rgb(123, 35, 49);
                }
            </style>
            <div class='div1'>
                <div class='div2'>
                    1
                </div>
                <div>2</div>
                <div>3</div>
            </div>
          "
      固定定位:
        功能:
          - fixed
          - 固定定位不保留原来的位置(脱标)
          - 固定定位以浏览器可视窗口为基准进行偏移
        案例:
          - "
            <style>
               div {

                position: fixed;
                right: 100px;
                top: 100px;

                width: 300px;
                height: 300px;
                background-color: pink;
               }
            </style>
            <div>1</div>
          "
      黏性定位:
        功能:
          - sticky
          - 黏性定位保留原来的位置(不脱标)
          - 黏性定位以浏览器可视窗口为基准进行偏移
          - 必须添加任意一个(top left right bottom)偏移值才有效
        案例:
          - "
            <style>
              body {
                 height: 2000px;
              }
              div{
                 position: sticky;
                 /* 当元素距离浏览器可视区域为0的时候就固定住 */
                 top: 0px;

                 width: 600px;
                 height: 100px;
                 background-color: pink;
                 margin: 100px auto 0;
              }
            </style>
            <div></div>
          "
    边偏移:
      - top 顶部偏移距离
      - bottom 底部端偏移距离
      - left 左边偏移距离
      - right 右边偏移距离
    z-index:
      - 次属性只有定位的盒子才具备
      - 默认值为auto，当位置重叠时，可以利用此属性进行z轴的调整前后位置，值越大越靠前
  浮动与定位是否会压住文字问题:
    功能:
      - 浮动的初衷是做文字环绕效果，所以浮动只会压住盒子，但不会压住盒子的内容
      - 绝对定位和固定定位会压住文字
    浮动案例:
      - "
        <style>
          img{
             /* 浮动压住的是盒子，但不压住盒子内容 */
             float: left;

             background-color: black;
             width: 100px;
             height: 100px;
          }
        </style>
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
         <img src='https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png' >
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
      "
    定位案例:
      - "
        <style>
          img{

             /* 固定定位 */
             /* position: fixed; */

             /* 绝对定位 */
             position: absolute;
             top: 50px;
             left: 50px;

             background-color: black;
             width: 100px;
             height: 100px;
          }
        </style>
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
         <img src='https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png' >
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
         <p>123456789</p>
      "
  块元素嵌套塌陷问题:
    - 浮动的盒子不会有塌陷问题
    - 定位的盒子不会有塌陷问题
    - "
      <style>
          .father {
              width: 500px;
              height: 500px;
              background-color: pink;

              /* 以下4种方式解决塌陷问题 */
              /* border-top: 1px solid transparent; */
              /* padding-top: 1px; */
              /* overflow: hidden; */

              /* 还有一种特殊方式解决，就是在父盒子上用padding解决 */
              /* padding-top: 100px; */


          }

          .son {
              width: 100px;
              height: 100px;
              background-color: rgb(69, 66, 66);

              /* margin-top: 100px; 次样式会导致塌陷问题*/
          }
      </style>
      <div class='father'>
          <div class='son'>

          </div>
      </div>
      "
  清除浮动问题:
     功能:
       - 父盒子没高度
       - 子盒子浮动了
       - 影响下面布局，我们就应该清除浮动
     案例:
       - "
         <style>
           * {
              margin: 0;
              padding: 0;
           }

           /* 方式3 伪元素法，是额外标签法的升级版，通过父元素添加
              .clearfix:after {
                    content: '';
                    display: block;
                    height: 0;
                    clear: both;
                    visibility: hidden;
              }
              兼容ie6 7 专有
              .clearfix {
                 *zoom: 1;
              }
           */

           /* 方式4，双伪元素 */
           .clearfix:before,
           .clearfix:after{
              content: '';
              display: table;
           }
           .clearfix:after{
              clear: both;
           }

           /* 兼容ie6 7 专有  */
           .clearfix {
              *zoom: 1;
           }


           .box{
              width: 784px;
              margin: 0 auto;
              background-color: pink;
              border-top: 3px solid rgb(14, 13, 13);

              /*
                 如果不给高度，box高度为0，因为浮动元素不会占用父亲的高度
                 但是，很多时候父亲的标准流不确定有多少子元素浮动
               */
              /* height: 40px;  */

              /* 方式1额外标签法(隔墙法)，w3c推荐，在子元素尾部加入块元素清除浮动 */
              /* <span style='display:block; clear:both;''></span> */

              /* 方式2，通过父元素添加 */
              /* overflow: hidden; */

           }

           .box li {
              list-style: none;
              float: left;
              width: 100px;
              height: 30px;
              background-color: rgb(235, 224, 14);
              box-shadow: 5px 5px 5px 5px rgba(0, 0, 0, 0.3) inset;
              border-radius: 15px;
              margin: 0 6px;
              text-align: center;
              line-height: 28px;
           }
           .box li:hover{
              cursor: pointer;
              box-shadow: 5px 5px 5px 5px rgba(0, 0, 0, 0.3);
           }
        </style>


        <div class='box clearfix'>
            <ul>
               <li>1</li>
               <li>2</li>
               <li>3</li>
               <li>4</li>
               <li>5</li>
               <li>6</li>
               <li>7</li>
               <li>8</li>
               <li>9</li>
               <li>10</li>
               <li>11</li>
               <li>12</li>
               <li>13</li>
               <li>14</li>
               <!-- <span style='display:block; clear:both;'></span> -->
            </ul>
         </div>
         <div class='box'>
            <ul>
               <li>1</li>
               <li>2</li>
               <li>3</li>
               <li>4</li>
               <li>5</li>
               <li>6</li>
               <li>7</li>
            </ul>
         </div>
      "
  固定定位之版心定位问题:
    - "
      <style>
        div{
            width: 600px;
            height: 2000px;
            margin: 50px auto;

            background-color: pink;

        }
        a {
            position: fixed;
            left: 50%;
            top: 70%;
            width: 100px;
            height: 100px;
            background-color: aqua;
            margin-left: 300px;
            margin-top: -150px;

        }
    </style>
      <div></div>
      <a href='#'>广告</a>
    "
  定位居中问题:
    固定定位和绝对定位:
      - "
        <style>
            div{
                width: 300px;
                height: 300px;

                /* 固定定位 */
                /* position: fixed; */
                /* 绝对定位 */
                position:absolute;

                /* 水平居中 */
                left: 50%;
                margin-left: -150px;

                /* 垂直居中 */
                top: 50%;
                margin-top: -150px;

                background-color: pink;
            }
        </style>
        <div></div>
      "
    相对定位:
      - "
        <style>
          div {

             position: relative;

             width: 300px;
             height: 300px;

             /* 相对定位之水平居中 */
             margin: 50px auto;
             background-color: pink;
          }
       </style>
       <div></div>
      "
  元素的显示与隐藏问题:
    display 和 visibility:
      功能:
        - "不占坑 display: 显示block 隐藏none;"
        - "占坑 visibility: 显示inherit 隐藏hidden;"
      案例:
        - "
          <style>
             a{
              display: block;
              width: 200px;
              height: 200px;
              background-color: pink;
             }


             [a1]{
              /* 不占坑 display: 显示block 隐藏none; */

              /* 占坑 visibility: 显示inherit 隐藏hidden;*/
              visibility: hidden;
             }
          </style>
          <a a1>123</a>
          <a>456</a>
        "
    overflow:
      功能:
        - 可以让一个盒子移除的内容进行隐藏或者出现滚动条
        - 重点【如果用到了绝对定位，可能会把移除的部分隐藏】
      案例:
        - "
          <style>
              a {
                 position: relative;
                 display: block;
                 width: 200px;
                 height: 200px;
                 background-color: pink;


                 /* 默认属性，全部都显示 */
                 /* overflow: visible; */

                 /* 直接隐藏多余内容 */
                 overflow: hidden;

                 /* 是否溢出都加滚动条 */
                 /* overflow: scroll; */
                 /* 只有溢出才加滚动条 */
                 /* overflow: auto; */
              }
              div{
                 position: absolute;
                 top: 100px;
                 left: 100px;

                 width: 300px;
                 height: 300px;
                 background-color: rgb(21, 20, 20);
              }
          </style>
          <a>我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            我们都是好朋友
            <div></div>
          </a>
        "
高级:
  精灵图:
    - 利用302弱缓存重定向技术，减少图片请求时间。
    - 利用fw的切片工具进行测量，ps测量不准
    - "
      <style>
          .box1{
              width: 84px;
              height: 33px;
              margin: 0 auto;

              background-color: pink;
              /* 设置背景图片 */
              background-image: url('1.0精灵图.png');
              /* 设置平铺图片 */
              background-repeat: no-repeat;
              background-position: -303px -84px;
          }
      </style>
      <div class='box1'></div>
    "
  字体图标:
    功能:
      - 如果一些结构简单的小图标，可以使用字体图标
      - https://icomoon.io/#icons
      - https://www.iconfont.cn/
    使用步骤:
    - "
      1 选择字体，并且下载icomoon.zip
      2 把fonts文件夹拷贝到项目根目录下
      3 拷贝style.css文件中的样式
      <style>
          @font-face {
              font-family: 'icomoon';
              src: url('fonts/icomoon.eot?73a6t8');
              src: url('fonts/icomoon.eot?73a6t8#iefix') format('embedded-opentype'),
                  url('fonts/icomoon.ttf?73a6t8') format('truetype'),
                  url('fonts/icomoon.woff?73a6t8') format('woff'),
                  url('fonts/icomoon.svg?73a6t8#icomoon') format('svg');
              font-weight: normal;
              font-style: normal;
              font-display: block;
          }
          body{
              font-family: '宋体','icomoon';
          }
          span{
              font-size: 30px;
              color: pink;
          }
      </style>
    4 使用
    <span></span>
    <span></span>
    <span>其他还能使用吗</span>
    "
    追加新字体图标步骤:
    - "
      1. selection.json 导入
      2. 重新下载
      3. 把fonts文件夹拷贝到项目根目录下
    "
  小三角制作:
    - "
      <style>
          .box1 {
              width: 0;
              height: 0;
              /* 兼容性 */
              line-height: 0;
              font-size: 0;

              border-top: 200px solid rgba(223, 104, 104,0);
              border-right: 200px solid rgba(33, 32, 32,0);
              border-bottom: 200px solid rgba(41, 186, 145,0);
              border-left: 200px solid rgba(136, 15, 229,1);
          }
          .box2 {
              width: 0px;
              height: 0px;
              /* 兼容性 */
              line-height: 0;
              font-size: 0;

              border: 200px solid transparent;
              border-top-color: red;
          }
      </style>
      <div class='box1'></div>
      <div class='box2'></div>
    "
    - "
      <style>
        .box {
            position: relative;
            width: 300px;
            height: 100px;
            background-color: pink;
            margin: 300px auto 0;
        }

        .box .icon {
            position:absolute;
            top: 50%;
            margin-top: -10px;
            right: 0px;
            margin-right: -20px;

            /* 以下是制作三角形 */
            width: 0px;
            height: 0px;
            /* 兼容性 */
            line-height: 0;
            font-size: 0;

            border: 10px solid transparent;
            border-left-color: red;
        }
      </style>
      <div class='box'>
          <span class='icon'></span>
      </div>
    "
  鼠标样式:
    - "
      <ul>
          <li style='cursor: default;'>default</li>
          <li style='cursor: pointer;'>pointer</li>
          <li style='cursor: move;'>move</li>
          <li style='cursor: text;'>text</li>
          <li style='cursor: not-allowed;'>not-allowed</li>
     </ul>
    "
  表单去除轮廓和去除文本域拖拽:
    - "
      <style>
          input,
          textarea {
              /* 去除表单轮廓 */
              outline: none;
          }

          textarea {
              resize: none;
          }
      </style>
      <input type='text'>
      <textarea></textarea>
    "
  图片与文字对齐:
    - "
    <style>
        * {
            padding: 0;
            margin: 0;
        }

        .box1 {
            width: 500px;
            height: 300px;
            background-color: pink;
            margin: 0 auto;
        }

        .box1 .img {
            /* 要求该元素必须是行内元素或者行内块元素 */
            display: inline-block;

            width: 100px;
            height: 100px;

            /* 要求图片和文字的顶线对齐 */
            /* vertical-align: top; */
            /* 要求图片和文字的中线对齐 */
            vertical-align: middle;
            /* 要求图片和文字的基线对齐 */
            /* vertical-align: baseline; */
            /* 要求图片和文字的顶线对齐 */
            /* vertical-align: bottom; */
        }
    </style>
    <div class='box1'>
        <a href='#'>我们都是朋友</a>
        <span>213p我</span>
        <img class='img'
            src='https://img1.baidu.com/it/u=3217543765,3223180824&fm=253&app=120&size=w931&n=0&f=JPEG&fmt=auto?sec=1658163600&t=dde414ccc49d8e6ad4c5e287bbfbfa7d'>
        <span>213p我</span>
        123
    </div>
    "
    - "
      <style>
          * {
              padding: 0;
              margin: 0;
          }


          .box2 {
              width: 500px;
              /* height: 300px; */
              background-color: pink;
              margin: 0 auto;

          }
          .box2 img{
             width: 300px;
             height: 300px;

              /*
                  解决方式1
                  默认是用基线对齐方式，所以会导致底部出现间隙
               */
              /* vertical-align: bottom; */

              /* 解决方式2 */
              display: block;
          }
      </style>
      <div class='box2'>
          <img class='img'
              src='https://img1.baidu.com/it/u=3217543765,3223180824&fm=253&app=120&size=w931&n=0&f=JPEG&fmt=auto?sec=1658163600&t=dde414ccc49d8e6ad4c5e287bbfbfa7d'>
      </div>
    "
  去除文字顶部和底部距离:
    - "
      <style>
          *{
              padding: 0;
              margin: 0;
          }
         div{
          width: 300px;
          height: 16px;
          background-color: pink;
          margin: 0 auto;

          /* 设置字体大小 */
          font-size: 16px;
          /* 去除文字的顶部距离和底部距离 */
          line-height: 16px;
         }
      </style>
      <div>我们都是好朋友！！！我们都是好朋友！！！我们都是好朋友！！！</div>
    "
  溢出显示省略号:
    单行溢出:
      - "
        <style>
            * {
                padding: 0;
                margin: 0;
            }

            div {
                width: 300px;
                height: 16px;
                background-color: pink;
                margin: 0 auto;

                /* 设置字体大小 */
                font-size: 16px;
                /* 去除文字的顶部距离和底部距离 */
                line-height: 16px;


                /* 条件1，先强制一行内显示文本 */
                white-space: nowrap;
                /* 条件2，超出的部分隐藏 */
                overflow: hidden;
                /* 条件3，用省略号代替超出的部分 */
                text-overflow: ellipsis;
            }
        </style>
        <div>我们都是好朋友！！我们都是好朋友！！我们都是好朋友！！！</div>
      "
    多行溢出:
      - "
        <style>
            * {
                padding: 0;
                margin: 0;
            }

            div {
                width: 300px;
                height: 48px;
                background-color: pink;
                margin: 0 auto;

                /* 设置字体大小 */
                font-size: 16px;
                /* 去除文字的顶部距离和底部距离 */
                line-height: 16px;


                /* 可能存在兼容性问题，适合于webkit内核浏览器和移动端 */
                /* 条件1，超出的部分隐藏 */
                overflow: hidden;
                /* 条件2，用省略号代替超出的部分 */
                text-overflow: ellipsis;
                /* 条件3，弹性伸缩盒子模型显示 */
                display: -webkit-box;
                /* 条件4，限制在一个快元素显示的文本的行数 */
                -webkit-line-clamp: 3;
                /* 条件5，设置检索伸缩盒对象的子元素的排列方式 */
                -webkit-box-orient: vertical;
            }
        </style>
        <div>我们都是好朋友！！我们都是好朋友！！我们都是好朋友！！！我们都是好朋友！！我们都是好朋友！！我们都是好朋友！！！我们都是好朋友！！我们都是好朋友！！我们都是好朋友！！！</div>
      "