CSS官方:
  - 官方 https://www.w3school.com.cn/h.asp
CSS介绍:
  - CSS(Cascading Style Sheets)层叠样式表
  - CSS最大价值是，HTML元素专注做结构，CSS专注做元素样式，达到元素和样式分离
  - CSS样式的声明和使用是严格区分大小写的
CSS组成部分: 选择器名+花括号 === #bt{}

初级:
  选择器分类:
    基础选择器:
      id选择器:
        - 规则声明，如果定义了id选择器样式，只允许一个标签调用，其他标签不允许在次调用
        - "#my_unique_style{}"
        - "
            <style>
               #sty1{
                    width: 100px;
                    height: 100px;
                    color: red;
                    font-size: 30px;
               }

               #sty2{
                    height: 100px;
                    color: rgb(111, 0, 255);
                    font-size: 30px;
               }
            </style>
            <span id='sty1'>good friends</span><br>

            <div id='sty2'>我们都是好朋友</div>
            "
      类选择器:
        - 规则声明，允许被多个标签多次使用
        - .mystyle{}
        - 元素支持同时声明多个类名 <div class="box green"></div>
        - "
          <style>
             .sty1{
                  color: red;
                  font-size: 30px;
             }
             .sty2{
                  color: rgb(119, 0, 255);
                  font-size: 10px;
             }

             <span class='sty1'>good friends</span><br>
             <span class='sty1'>good friends</span><br>
             <span class='sty2'>good friends</span><br>
             <span class='sty2'>good friends</span><br>

             <div class='sty1'>我们都是好朋友</div>
             <div class='sty1'>我们都是好朋友</div>
             <div class='sty2'>我们都是好朋友</div>
             <div class='sty2'>我们都是好朋友</div>
          </style>
        "
      标签选择器:
        - div{}
        - "
            <style>
                span {
                    color: rgba(36, 36, 34, 0.432);
                    font-size: small;
                }
                div {
                    color: burlywood;
                    font-size: 20px;
                }
            </style>

            <span>good friends</span><br>
            <span>good friends</span><br>
            <span>good friends</span><br>
            <span>good friends</span><br>

            <div>我们都是好朋友</div>
            <div>我们都是好朋友</div>
            <div>我们都是好朋友</div>
            <div>我们都是好朋友</div>
          "
      通配符选择器:
        - "*{} 包括 html head body title meta 反正页面所有标签元素"
        - "
          * {
            height: 100px;
            color: red;
            font-size: 30px;
          }
          <span >good friends</span><br>
          <span >good friends</span><br>
          <span >good friends</span><br>

          <div >我们都是好朋友</div>
          <div >我们都是好朋友</div>
          <div >我们都是好朋友</div>
        "
      屬性选择器:
        - "
        /* [aaa] {
            color: red;
        } */
        [aaa='111'] {
            color: red;
        }

        <div aaa='111'>1</div>
        <div aaa='111'>1</div>
        <div aaa='222'>1</div>
        "
    复合选择器:
      功能:
        - 复合选择器是由多个基础选择器组合而成
      后代选择器(空格)+子代选择器(>):
        - 后代选择器可以跨域级别去选择任意一级子标签
        - 子选择器只能一级一级往下找，子选择器比较精确，不容易越级
        - 后代选择器可以结合子选择器一起使用
        - "
          /* 后代选择器 */
          div li{
              color: red;
          }

          /* 子选择器 */
          div > span > ul > li {
              font-weight: 700;
          }

          /* 后代选择器+子选择器 */
          div > span li{
              font-size: 30px;
          }

          <div>
              <span>
                  <ul>
                      <li>1</li>
                      <li>1</li>
                      <li>1</li>
                  </ul>
              </span>
          </div>
        "
      伪类选择器(冒号):
        - 伪类选择器一般需要跟在基础选择器屁股使用
        - "
          案例1
          a {
              color: rgb(176, 173, 168);
              text-decoration: none;
          }

          div a:hover {
              color: rgb(228, 29, 29);
              text-decoration: underline;
          }

          /* 如果全部写，一定要按照lvha顺序下，否则可能不生效 */
          /* 未访问过 a:link*/
          /* 已访问过 a:visited*/
          /* 鼠标划过 a:hover*/
          /* 鼠标按下 a:active*/


          <a href='#'>百度</a>
          <a href='#'>新浪</a>
          <div>
              <a href='#'>百度</a>
              <a href='#'>新浪</a>
          </div>
        "
        - "
          案例2
          body > div > .bt:focus {
              background-color: antiquewhite;
          }

          <div>
              <input class='bt' type='text' >
              <input class='bt' type='text'>
          </div>

          <div>
              <div>
                  <input class='bt' type='text' >
                  <input class='bt' type='text'>
              </div>
          </div>

          <input class='bt' type='text' >
          <input class='bt' type='text'>
        "
      交集选择器:
        - "
          案例1
          <style>
             div.ca.box{
               color: red;
             }
          </style>
          <div  class='box ca'>1</div>
          <p  class='box ca'>2</p>
        "
        - "
          案例2
          /* 交集选择器 = 标签选择器+属性选择器 */
          /* div[a] {
             color: red;
          } */

          /* 交集选择器 = 标签选择器+属性选择器 */
          /* div[a='a2'] {
             color: red;
          } */

          /* 交集选择器 = 标签选择器+类选择器+属性选择器+类选择器 */
          p.box[a='a2'].ca{
             color: red;
          }

         <div class='box ca1' a='a1'>1</div>
         <div class='box ca1' a='a1'>1</div>

         <div class='box ca' a='a2'>2</div>
         <div class='box ca' a='a2'>2</div>

         <p class='box ca' a='a2'>3</p>
         <p class='box ca' a='a2'>3</p>
        "
      并集选择器(逗号)(同时声明多个选择器):
        - 可以将任意选择器一起使用，例如 let a,b,c ;
        - 一个逗号为一种选择器
        - "
                <style>
                   body > div  div,span,a,p {
                        color: red;
                   }
                </style>
                <div>1</div>
                <span>1</span>
                <div>
                    <div>1</div>
                    <span>1</span>
                    <span>1</span>
                    <div>1</div>
                </div>
                <span>1</span>
                <div>1</div>
              "
    复合选择器总结:
      - 空格后代任意一个
      - ">下一个"
      - 连着写当前标签找
      - 冒号，给当前标签配上伪类选择器
      - 逗号是声明多个
      - "
        #div div > .abc > div[a][b][c][d='1']#a1.a2 > input#abc.bcd[class='bcd efg'].efg:focus {
            background-color: rgb(240, 17, 88);
        }
        <div id='div'>
          <div>
              <div>
                  <div class='abc'>
                      <div a b c d='1' id='a1' class='a2'>
                          <input type='text' name='' class='bcd efg' id='abc'>
                      </div>
                      <div a b c d='2'>
                          <input type='text' name='' id=''>
                      </div>
                  </div>
              </div>
              <div class='abc'>
                  <div a b c d='1' id='a1' class='a2'>
                      <input type='text' name='' class='bcd efg' id='abc'>
                  </div>
                  <div a b c d='2'>
                      <input type='text' name='' id=''>
                  </div>
              </div>
          </div>
      </div>
      "
  标签元素分类:
    功能: "
        display: block; 转换为块元素
        display: inline; 转换为行内元素
        display: inline-block; 转换为行内块元素
      "
    块元素:
      功能:
        - "<h1-h6> <p> <ul> <ol> <li> <div> 等，其中<div>是最典型的块元素"
      特点:
        - 独占一行
        - 高度、宽度、外边距、内边距都可以设置
        - 宽度默认是父级容器宽度的100%
        - 是一个容器，里面可以放行内元素或者块元素
      例外:
        - 文字类的元素内不能使用块元素
        - <p>标签主要用于存放文字，因此<p>标签里面不能放块元素，特别是不能放<div>
        - 同理<h1-h6>都是文字类块元素，里面也不能放其他块元素
    行内元素:
      功能:
        - "<a> <strong> <b> <em> <i> <del> <s> <ins> <u> <span等，其中<span>是最典型的块元素"
      特点:
        - 多个可以在同一行上显示
        - 高度、宽度设置是无效的
        - 默认宽度就是它本身内容的宽度
        - 行内元素只能容纳文本或其他行内元素
      例外:
        - <a>标签里面不能再放<a>标签
        - <a>标签里面可以放块元素，但是给<a>转换一下块元素模块最安全
    行内块元素(乱取名的):
      功能:
        - "<img> <input> <td> 它们同时具备行内元素特点，和块元素特点"
      特点:
        - 多个可以在同一行上显示(行内元素特点)，但是它们之间会有空白间隙。
        - 默认宽度就是它本身内容的宽度(行内元素特点)
        - 高度、宽度、行高。外边距以、内边距都可以设置(块元素特点)
  CSS的3种样式表:
    - "外部样式表 <link rel='stylesheet' href='./abc/mystyle.css'>"
    - "内部样式表 <style></style>"
    - "行内样式表 <div style='color: green;'>我们都是好朋友 frends</div>"
  CSS的三大特性:
    重叠性:
      - 当权重一样时，后者声明的相同样式会覆盖前者相同的样式。
      - "
        #ps {
          color: red;
          font-size: 30px;
         }
        #ps {
          color:aqua
        }
      "
    继承性:
      - 子元素会继承父元素的【部分不相同的样式】，不一定全部样式都继承
      - 例如，文本样式和字体样式相关的可能会继承
    优先级之权重计算:
      - 样式的优先级取决于1个或多个选择器的权重之和
      - "
        通配符选择器、继承 < 标签选择器 < 属性、伪类、类选择器 < ID选择器 < 行内样式 < !important
          ! important - - - infinity
          行内样式 - - - 1,0,0,0
          ID选择器 - - - 0,1,0,0
          属性、伪类、类选择器 - - - 0,0,1,0
          标签选择器 - - - 0,0,0,1
          通配符选择器、继承 - - - 0,0,0,0
        复合选择器计算权重是累个相加，紧急不会进位
        权重进行比较的时候，逐位进行比较，如果第1位比较大，那么就不往下继续比较了
        !important对继承样式无效，只能对本身元素有效
          div div div div div div div div div div div {}
              权重为 0,0,0,11
          #div div > .abc > div[a][b][c][d='1']#a1.a2 > input#abc.bcd[class='bcd efg'].efg:focus {}
              权重为
              0,1,0,0
              0,0,0,1
              0,0,1,0
              0,0,0,1
              0,0,1,0
              0,0,1,0
              0,0,1,0
              0,0,1,0
              0,1,0,0
              0,0,1,0
              0,0,0,1
              0,1,0,0
              0,0,1,0
              0,0,1,0
              0,0,1,0
              0,0,1,0
              0,3,10,3

      "
    案例:
      - "
        <style>
            /* 继承或者* < 标签选择器 < 类选择器、伪类选择器 < 属性选择器 < ID选择器 < 标签行内样式(style='') < !important */
            body {
                color: red;
                font-size: 300px;
            }

            span {
                color: rgb(0, 217, 255);
            }

            .sp{
                color: bisque;
            }

            [class][id]{
                color: yellow!important;
            }

            #sp{
                color: brown!important;
            }
        </style>
        <span class='sp' id='sp' style='color: green!important;'>我们</span>
      "
  字体样式:
    - "
      /* 设置字体系列 */
      /* font-family: '宋体', '微软雅黑'; */

      /* 设置字体大小 */
      /* font-size: 16px; */

      /* 设置字体加粗 */
      /* font-weight: 700; */

      /* 设置字体样式 正体或者斜体*/
      /* font-style: italic; */

      /* 复合属性不能更改顺序 [font-style] [font-weight] font-size/[line-height]  font-family*/
      font: italic 700 18px '宋体'
      /* font: 18px '宋体' */
    "
  文本样式:
    - "
      div {
          /* 文本颜色 */
          color: rgb(107, 99, 99);

          /* 文本对齐 */
          text-align: center;

          /* 文本装饰 去掉下划线 */
          text-decoration: underline;

          /* 文本首行缩进 如果当前一个文字大小为16px，那么2em=16x2*/
          text-indent: 2em;

          /*
              行间距/行膏 = 文字上间距 + 文字大小 + 文字下边距
                   26px  =  5px   +   16px  + 5px
          */
          line-height: 26px;

          border: solid red;
      }

      <div>我们都是好朋友 frends</div><br>
      <div>我们都是好朋友 frends</div><br>
      <div>我们都是好朋友 frends</div><br>
    "
  背景样式:
    - "
      <style>
         span {
              display: block;
              width: 500px;
              height: 500px;

              /* 背景颜色 */
              /* background-color: antiquewhite; */
              /* css3设置背景颜色，可以设置透明度 */
              background: rgba(92, 13, 219, 0.6);

              /* 设置背景图片 */
              background-image: url('https://img2.baidu.com/it/u=2965709842,4091470419&fm=253&fmt=auto&app=138&f=JPEG?w=140&h=140');

              /* 设置平铺图片 */
              background-repeat: no-repeat;

              /*
                  background-position: x y
                  方位名词 x(left center right) y(top center bottom)
                  精确单位 0px 0px
                  背景图片方位名词 xy没有严格顺序，背景图片精确单位 xy有严格顺序
                  如果只写一个参数，则第二个参数为center居中
              */
              background-position: center center;
              /* background-position: 0px 0px; */



              /* 复合属性 */
              /* background: [背景颜色] [背景图片地址] [背景平铺] [背景图片滚动] [背景图片位置]; */
         }
         body {
          background-image: url(1.jpg);
          background-position: -1200px -1800px;
          background-repeat: no-repeat;

          /* 图片贴附效果
              fixed 不会随着滚动条的滚动而滚动
              scroll 默认会滚动
           */
          background-attachment: fixed;
         }
      </style>

       <span></span>
       <span></span>
       <span></span>
       <span></span>
       <span></span>
       <span></span>
       <span></span>
       <span></span>
    "
中级:
  功能: 页面布局三大核心，盒子模型、浮动、定位
  盒子模型:
    功能:
      - 外边距(margin)、边框(border)、内边距(padding)、内容区域(centent)
      - 块元素和行内块元素可以作为盒子使用，行内元素不能作为盒子使用
      - 盒子宽 = 边框左右宽+内边距左右宽+内容区域宽
      - 盒子高 = 边框上下高+内边距上下高+内容区域高
    边框:
      基本使用:
        - "
        <style>
            a {
                display: block;
                text-decoration: none;
                font-size: 30px;

                width: 300px;
                height: 300px;

                /* 边框的大小 */
                border-width: 5px;
                /* 边框的样式 默认为none */
                border-style: solid;
                /* 边框的颜色 */
                border-color: pink;

                /*
                    边框复合样式写法，没有先后顺序
                    border: 5px solid red;
                */
                /*
                    可以针对边框的 top bottom left right 设置
                    border-top-width: 10px;
                    border-top-style:dashed;
                    border-top-color:black;

                    边框复合样式写法，没有先后顺序
                    border-top: 5px solid red;
                */
            }
        </style>
        <a href='#'>大家好！</a>
      "
      表格边框合并使用:
        - "
          table,
          th,
          td {
              border-width: 1px;
              border-style: solid;
              border-color: pink;

              /* 控制浏览器绘制表达边框的方式，将相邻的框架进行合并 */
              border-collapse: collapse;
          }
        "
      圆角边框使用:
        - "
        圆角边框边框属性
        <style>
           .div1 {
            width: 300px;
            height: 300px;
            background-color: pink;
            margin: 30px auto;

            /* 圆形边框，设置高度和宽度的一半*/
            border-radius: 150px;
            /* 等价于 高度和宽度的一半 */
            /* border-radius: 50%; */
           }

           .div2 {
            width: 300px;
            height: 100px;
            background-color: pink;
            margin: 30px auto;

            /* 椭圆边框，设置高度的一半*/
            border-radius: 50px;
            /* 等价于 高度和宽度的一半 */
            /* border-radius: 50%; */


            /* border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            border-bottom-left-radius: 10px;
            border-bottom-right-radius: 10px; */
           }
        </style>
        <div class='div1'></div>
        <div class='div2'></div>
      "
    内边距:
      - "
        <style>
            div {
                height: 100px;
                width: 100px;
                background-color: pink;

                border: 10px solid red;

                text-align: center;
                line-height: 100px;

                /* 内边距 */
                padding-left: 10px;
                padding-right: 10px;
                padding-top: 10px;
                padding-bottom: 10px;


                /* 复合样式写法 */
                /* 上下左右 */
                /* padding: 10px; */
                /* 上下 左右 */
                /* padding: 10px 20px; */
                /* 上 左右 下 */
                /* padding: 10px 20px 30px; */
                /* 上  右 下 左 */
                /* padding: 10px 20px 30px 40px; */
            }
        </style>
        <div>1</div>
      "
    外边距:
      - 外边距用来控制盒子与盒子之间的距离
      - "
        <style>
            div {
                height: 100px;
                width: 100px;
                background-color: pink;

                border: 10px solid red;

                text-align: center;
                line-height: 100px;

                padding: 10px;

                /* 内边距 */
                margin-left: 10px;
                margin-right: 10px;
                margin-top: 10px;
                margin-bottom: 10px;


                /* 复合样式写法 */
                /* 上下左右 */
                /* margin: 10px; */
                /* 上下 左右 */
                /* margin: 10px 20px; */
                /* 上 左右 下 */
                /* margin: 10px 20px 30px; */
                /* 上  右 下 左 */
                /* margin: 10px 20px 30px 40px; */
            }
        </style>
        <div>1</div>
        <div>1</div>
      "
  水平居中:
    块元素:
      - "
        /* 块元素居中，方式一 */
        /* width: 200px;
        margin-left: auto;
        margin-right: auto; */

        /* 块元素居中，方式二 */
        /* width: 200px;
        margin: auto; */

        /* 块元素居中，方式三 */
        width: 500px;
        margin: 0px auto;
      "
    行内元素&行内块元素&文字内容:
      - "
        /* 行内元素 行内块元素 以及内容都需要找它父亲来做居中 */
        text-align: center;
      "
  垂直居中:
    行内元素&行内块元素&文字内容:
      - "
        /* 指定行高可以实现水平居中 */
        line-height: 500px;
      "
  块元素嵌套塌陷问题:
    - "
    <style>
        .father {
            width: 500px;
            height: 500px;
            background-color: pink;

            /* 以下3种方式解决塌陷问题 */
            /* border-top: 1px solid transparent; */
            /* padding-top: 1px; */
            overflow: hidden;

        }

        .son {
            width: 100px;
            height: 100px;
            background-color: rgb(69, 66, 66);
            margin-top: 100px;
        }
    </style>
    <div class='father'>
        <div class='son'>

        </div>
    </div>
    "
  行内元素: 只允许设置【左右内边距】和【左右外边距】，块元素和行内块元素不限制
  清除所有元素默认的外边距和内边距:
    - "
      * {
        margin: 0px;
        padding: 0px;
      }
    "

高级:
