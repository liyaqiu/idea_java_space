官方网站:
  - 可以查看不同手机的效果显示 https://responsively.app/download/
浏览器私有前缀:
  - 可以实现兼容老版本的浏览器
  - "
      [ -moz- ] 代表火狐
      [-ms-] 代表ie
      [-webkit-] 代表safari chrome
      [-o-] 代表Opera
    "
视口:
  布局视口:
    - 一般移动设备的浏览器都默认设置了一个布局视口，用于解决早起的PC端页面在手机上显示的问题。
    - IOS Android基本都将这个视口分辨率设置为980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放页面
  视觉视口:
    - 它是用户正在看到的网站的区域。
    - 我们可以通过缩放区操作视觉视口，但不会影响布局视口，布局视口扔保持原来的宽度。
  理想视口:
    - 理想视口，对设备来说，是最理想的视口尺寸
    - 需要手动添加meta视口标签通知浏览器操作
    - meta视频标签的主要目的是，布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就有多宽
    - "
      <!--
             理想视口标签
            width=device-width 表示宽度等于视口的宽度
            initial-scale=1.0 表示初始缩放比，值大于零
            user-scalable=no 表示是否允许用户缩放，yes或1表可以，no或0表不行
            maximum-scale=1.0 最大缩放比
            minimum-scale=1.0 最小缩放比
        -->
      <meta name='viewport' content='width=device-width, initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no'> <!-- 理想视口标签 -->
    "
物理像素(PC)和物理像素比(移动):
  功能:
    - 因为手机屏幕采用了Retina视网膜技术进行了像素压缩的原因，导致PC端和移动端的像素比为1:2，也就是说在PC端设置的1像素，去到手机端成了2像素
  二倍图:
    - 因为，在PC端设置的图片为(50px,50px)，最后在移动端就会显示为(100px,100px)
    - 所以，应该在PC端就应该准备好(100px,100px)的图片，然后在PC端的显示为(50px,50px)，最后在移动端就会显示为(100px,100px)，这样图片不会丢失失真
CSS初始化:
  功能:
    - 保护了有价值的默认值，修复了浏览器的bug，是模块化的，拥有详细的文档
    - 官网 https://github.com/necolas/normalize.css
    - 样式下载 http://necolas.github.io/normalize.css/
  额外去掉手机自带特殊样式:
    - "
      * {
          /* 使用css3盒子模型 */
          box-sizing: border-box;
          -webkit-box-sizing: border-box;
          /* 清除a标签高亮效果 */
          -webkit-tap-highlight-color: transparent;
      }
      input{
        /* 清除ios上按钮特殊效果 */
        -webkit-appearance: none;
      }
      img,a{
          /* 禁用长按页面时的弹出菜单 */
          -webkit-touch-callout: none;
      }
    "
技术选型:
  单独制作移动端页面:
    流式布局(宽度百分比布局):
      功能:
        - 流式布局就是百分比布局，也称为非固定像素布局
        - 通过合资的宽度设置百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充
        - 流式布局方式是移动web开发使用比较常用的布局方式
      原理案例:
        - "
          <style>
              *{
                  margin: 0;
                  padding: 0;
              }
              .box {
                  width: 100%;
                  height: 200px;
                  margin: 100px auto 0;
                  background-color: pink;
              }
              ul{
                  width: 100%;
                  min-width: 600px;
                  max-width: 1200px;
                  height: 100%;
                  margin: 0 auto;
              }
              li:nth-child(even){
                  float: left;
                  width: 20%;
                  height: 100%;
                  background-color: red;
                  list-style: none;
              }
              li:nth-child(odd){
                  float: left;
                  width: 20%;
                  height: 100%;
                  background-color: rgb(52, 22, 22);
                  list-style: none;
              }
          </style>
          <div class='box'>
              <ul>
                  <li></li>
                  <li></li>
                  <li></li>
                  <li></li>
                  <li></li>
              </ul>
          </div>
        "
    flex弹性布局(强烈推荐):
      功能:
        - flex(Flexible Box)，统称弹性布局，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局
        - 当我们为父盒子设置flex布局以后，子元素的float、clear、vertical-align属性将失效
        - 父盒子设置了flex，成为flex容器，里面的子元素盒子成为flex项
        - flex布局原理，通过给父盒子添加flex属性，来控制子盒子的位置和排列方式
      传统布局VS弹性flex布局:
        - 传统布局，兼容性好，布局频繁，局限性，不能在移动端很好的布局
        - flex布局，操作方便，布局极为简单，移动端应用很广泛，PC端浏览器支持情况差，IE11或者更低版本有可能不支持
        - 如果是PC端页面布局，我们还是考虑传统布局
        - 如果是移动端或者不考虑兼容性问题的PC端页面布局，我们还是使用flex弹性布局
      flex父元素设置:
        - "
          <style>
              .box {
                  /* 开启flex布局 */
                  display: flex;
                  width: 400px;
                  height: 400px;

                  background-color: pink;
                  margin: 0 auto;

                  /*
                      设置主轴，侧轴不用设置，默认另一边就是侧轴
                      主轴为x     row
                      主轴为x反转 row-reverse
                      主轴为y     column
                      主轴为y反转 column-reverse
                   */
                  flex-direction:row;

                  /*
                      控制是否可以换换
                      nowrap 默认为不换行，不换行情况下，如果宽度或者高度不够，会自动缩小子元素
                      wrap 换行
                   */
                  flex-wrap: wrap;

                  /*
                      复合属性
                      flex-flow = flex-direction + flex-wrap
                   */
                  /* flex-flow: row nowrap; */

                  /*
                      控住主轴，子元素排列方式
                      flex-start 主轴开始显示
                      flex-end 主轴结尾显示
                      space-around 平均分配显示
                      space-evenly 平均分配显示
                      space-between 左右各占一个，剩下在中间平均分配显示
                  */
                  /* justify-content:space-between; */

                  /*
                      控制单行侧轴，子元素排列方式
                      flex-start 侧轴顶部显示
                      flex-end 侧轴底部显示
                      center 侧轴垂直居中显示
                      stretch 侧轴拉伸显示(前提是子元素不能有高度/宽度)
                   */
                  /* align-items:center; */

                  /*
                      控制多行侧轴，子元素排列方式
                      flex-start 侧轴开始显示
                      flex-end 侧轴结尾显示
                      space-around 平均分配显示
                      space-evenly 平均分配显示
                      space-between 上下各占一行，剩下在中间平均分配显示
                   */
                  align-content:space-between;
              }

              span {
                  width: 100px;
                  height: 100px;
                  border: 1px solid red;
                  margin: 10px;
              }
          </style>
          <div class='box'>
              <span>1</span>
              <span>2</span>
              <span>3</span>
              <span>4</span>
          </div>
        "
      flex子元素设置:
        - "
          <style>
              * {
                  margin: 0;
                  padding: 0;
              }

              .box {
                  display: flex;
                  width: 100%;
                  height: 200px;
                  max-width: 800px;
                  min-width: 600px;
                  margin: 100px auto 0;
                  background-color: pink;
              }

              span{
                  box-sizing: border-box;
                  border: 1px solid red;
              }

              .a1,.a2{
                  width: 100px;
                  height: 100px;
              }

              .a3{
                  /* flex属性用于从父亲剩余空间来进行分数分配,默认值为0 */
                  flex: 11;
                  height: 100px;
                  /* 可以控制子元素在侧轴的*/
                  align-self:flex-end;
                  /*控制子元素的排列顺序，默认为0，值越小越靠前*/
                  order: -1;
              }
              .a4{
                  flex: 5;
                  order: 1;
              }

          </style>
          <div class='box'>
              <span class='a1'>1</span>
              <span class='a2'>2</span>
              <span class='a3'>3</span>
              <span class='a4'>4</span>
          </div>
        "
        - "
          <style>
             .box{
              display: flex;
              flex-direction: row;
              flex-wrap: wrap;
              width: 500px;
              height: 100px;
             }
             span{
              /* 设置成百分比，相对于父亲来说，宽高各占20% */
              flex: 20%;
              box-sizing: border-box;
              border: 1px solid red;
             }

          </style>
          <div class='box'>
            <span>1</span>
            <span>2</span>
            <span>3</span>
            <span>4</span>
            <span>5</span>
            <span>1</span>
            <span>2</span>
            <span>3</span>
            <span>4</span>
            <span>5</span>
          </div>
        "
    rem+媒体查询+less布局(市场非常流行的):
      em相对单位和rem相对单位:
        - em相对于自己或者父亲或者祖宗的font-size
        - rem相对于HTML的font-size，rem可以实现统一控制页面大小
        - "
            <style>
                html{
                    font-size: 10px;
                }
                div{
                    font-size: 10px;
                }
                [p1]{
                    /*
                        em相对于自己或者父亲或者祖宗的font-size大小
                        200px = 10em x font-size: 20px
                    */
                    font-size: 20px;
                    width: 10em;
                    height: 10em;
                    background-color: pink;
                }
                [p2]{
                    /*
                        rem相对于HTML的font-size大小
                        100px  = 10ren x font-size: 10px
                     */
                    width: 10rem;
                    height: 10rem;
                    background-color: rgb(55, 23, 236);
                }
            </style>
            <div>
              <p p1>123</p>
              <p p2>456</p>
            </div>
          "
      媒体查询:
        - "
          <style>
              /*
                  css3 媒体查询可以根据不同的设备设置不同的样式
                  注意细节，从小到大写可能会有样式覆盖和继承问题
                  参数1
                      screen 屏幕显示器(电脑屏幕、平板电脑、智能手机等)
                      print 打印机
                      all 所有设备
                  参数2
                      and 可以将多个媒体特性链接到一起。
                      not 排除某个媒体类型
                      only 指定某个特定的媒体类型，可以省略
                  参数3，不用媒体类型参数不一样，以下是screen屏幕的参数
                      width 屏幕宽度 =600px的时候触发
                      min-width 屏幕宽度 >=600px的时候触发
                      max-width 屏幕宽度 <=600px的时候触发
               */

              /* 屏幕宽度 0px - 539px 的时候触发的时候触发 */
              @media screen and (max-width :539px){
                  body{
                      background-color: red;
                  }
              }
              /* 屏幕宽度 540px - 969px 的时候触发的时候触发 */
              @media screen and (min-width :540px) and (max-width:969px){
                  body{
                      background-color: green;
                  }
              }

              /* 屏幕宽度 970px - infinity 的时候触发的时候触发 */
              @media screen and (min-width :970px){
                  body{
                      background-color: blue;
                  }
              }
          </style>
        "
      less:
        功能:
          - 插件安装 Easy LESS
          - Less是一门CSS预处理语言，它扩展了CSS的动态特性
          - less官方 http://lesscss.cn
        变量声明:
          - "
            步骤一，定义less文件 3.3单独制作-rem+媒体查询+less布局-demo.less

            /* less变量定义，严格区分大小写 */
            @corlor: red;
            @bgcorlor: rgb(158, 147, 149);
            @fontSize: 30px;

            .demo1{
                width: 100px;
                height: 100px;
                color: @corlor;
                font-size: @fontSize;
                background-color: @bgcorlor;
            }

            /* less嵌套 */
            .demo2{
                width: 100px;
                height: 100px;
                background-color: pink;

                a{
                    /* 后代选择器 */
                    text-decoration: none;
                    font-size: 20px;

                    &::before{
                        /* 伪元素选择器 */
                        content: '你好';
                    }

                    &:hover{
                        /* 伪类选择器 */
                        color: white;
                    }

                    &[href]{
                        /* 交集选择器 */
                        display: block;
                        border: 1px solid black;
                    }

                    &:nth-child(1){
                        /* 结构伪类选择器 */
                        color: aqua;
                    }
                }

                >a{
                    /* 子选择器 */
                    background-color: red;
                }

                //*[href][href][href][href]{
                    /* 通配符选择器 */
                    //color: black;
                //}

            }

            /* less运算 */
            @baseFontSize:13px;
            html{
                font-size: @baseFontSize;
            }

            .demo3{
                /*
                    版本Bug原因，用到除法必须加./或者小括号
                    运算符两边最好有空格
                    如果运算中出现多个单位，则以第一个为准
                 */
                /* width: (@width / 2); */
                width: (100rem / @baseFontSize);
                height: (100rem / @baseFontSize);
                background-color: green;
            }

           步骤2使用less文件 <link rel='stylesheet' href='./3.3单独制作-rem+媒体查询+less布局-demo.css'>
            <div class='demo1'>demo1</div>
            <div class='demo2'>
                <a href='#'>demo2</a>
            </div>
            <div class='demo3'></div>
          "
    混合布局:
  响应式页面兼容移动端:
    - 媒体查询
    - bootstrap
