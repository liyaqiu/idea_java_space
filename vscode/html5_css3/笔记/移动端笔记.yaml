视口:
  布局视口:
    - 一般移动设备的浏览器都默认设置了一个布局视口，用于解决早起的PC端页面在手机上显示的问题。
    - IOS Android基本都将这个视口分辨率设置为980px，所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放页面
  视觉视口:
    - 它是用户正在看到的网站的区域。
    - 我们可以通过缩放区操作视觉视口，但不会影响布局视口，布局视口扔保持原来的宽度。
  理想视口:
    - 理想视口，对设备来说，是最理想的视口尺寸
    - 需要手动添加meta视口标签通知浏览器操作
    - meta视频标签的主要目的是，布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们布局的视口就有多宽
    - "
      <!--
             理想视口标签
            width=device-width 表示宽度等于视口的宽度
            initial-scale=1.0 表示初始缩放比，值大于零
            user-scalable=no 表示是否允许用户缩放，yes或1表可以，no或0表不行
            maximum-scale=1.0 最大缩放比
            minimum-scale=1.0 最小缩放比
        -->
      <meta name='viewport' content='width=device-width, initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no'> <!-- 理想视口标签 -->
    "
物理像素(PC)和物理像素比(移动):
  功能:
    - 因为手机屏幕采用了Retina视网膜技术进行了像素压缩的原因，导致PC端和移动端的像素比为1:2，也就是说在PC端设置的1像素，去到手机端成了2像素
  二倍图:
    - 因为，在PC端设置的图片为(50px,50px)，最后在移动端就会显示为(100px,100px)
    - 所以，应该在PC端就应该准备好(100px,100px)的图片，然后在PC端的显示为(50px,50px)，最后在移动端就会显示为(100px,100px)，这样图片不会丢失失真
CSS初始化:
  功能:
    - 保护了有价值的默认值，修复了浏览器的bug，是模块化的，拥有详细的文档
    - 官网 https://github.com/necolas/normalize.css
    - 样式下载 http://necolas.github.io/normalize.css/
  额外去掉手机自带特殊样式:
    - "
      * {
          /* 使用css3盒子模型 */
          box-sizing: border-box;
          -webkit-box-sizing: border-box;
          /* 清除a标签高亮效果 */
          -webkit-tap-highlight-color: transparent;
      }
      input{
        /* 清除ios上按钮特殊效果 */
        -webkit-appearance: none;
      }
      img,a{
          /* 禁用长按页面时的弹出菜单 */
          -webkit-touch-callout: none;
      }
    "

技术选型:
  单独制作移动端页面:
    流式布局(宽度百分比布局):
      功能:
        - 流式布局就是百分比布局，也称为非固定像素布局
        - 通过合资的宽度设置百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充
        - 流式布局方式是移动web开发使用比较常用的布局方式
      原理案例:
        - "
          <style>
              *{
                  margin: 0;
                  padding: 0;
              }
              .box {
                  width: 100%;
                  height: 200px;
                  margin: 100px auto 0;
                  background-color: pink;
              }
              ul{
                  width: 100%;
                  min-width: 600px;
                  max-width: 1200px;
                  height: 100%;
                  margin: 0 auto;
              }
              li:nth-child(even){
                  float: left;
                  width: 20%;
                  height: 100%;
                  background-color: red;
                  list-style: none;
              }
              li:nth-child(odd){
                  float: left;
                  width: 20%;
                  height: 100%;
                  background-color: rgb(52, 22, 22);
                  list-style: none;
              }
          </style>
          <div class='box'>
              <ul>
                  <li></li>
                  <li></li>
                  <li></li>
                  <li></li>
                  <li></li>
              </ul>
          </div>
        "
    flex弹性布局(强烈推荐):
      功能:
        - flex(Flexible Box)，统称弹性布局，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局
        - 当我们为父盒子设置flex布局以后，子元素的float、clear、vertical-align属性将失效
        - 父盒子设置了flex，成为flex容器，里面的子元素盒子成为flex项
        - flex布局原理，通过给父盒子添加flex属性，来控制子盒子的位置和排列方式
      传统布局VS弹性flex布局:
        - 传统布局，兼容性好，布局频繁，局限性，不能在移动端很好的布局
        - flex布局，操作方便，布局极为简单，移动端应用很广泛，PC端浏览器支持情况差，IE11或者更低版本有可能不支持
        - 如果是PC端页面布局，我们还是考虑传统布局
        - 如果是移动端或者不考虑兼容性问题的PC端页面布局，我们还是使用flex弹性布局
    less+rem+媒体查询布局:
    混合布局:
  响应式页面兼容移动端:
    - 媒体查询
    - bootstrap
