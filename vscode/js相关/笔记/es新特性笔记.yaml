块作用域:
  - 比如{},for{},while{},if{},switch{}
  - let和const定义的变量都有块作用域
let:
  - let在同一作用域(包括快作用域)下不能重复定义
  - let在全局作用域下定义变量不会作为window的属性存在，并且不会污染window全局变量
  - let对块作用域有效
  - let不存在变量提升
const:
  - const在同一作用域(包括快作用域)下不能重复定义
  - const在全局作用域下定义变量不会作为window的属性存在，并且不会污染window全局变量
  - const对块作用域有效
  - const不存在变量提升
  - const需要赋予初始值,并且不允许修改
解构赋值:
  功能:
    - 与声明关键字无关(var const let)，任何定义变量的关键字都可以使用来进行解构
    - 对象可以使用{}进行解构，数组可以使用[]进行解构
  数组解构赋值:
    - "
      //案例1
      /* var arr = ['eric','Tom','Jerry']
      let [name1,name2,name3,name4] = arr */
      //案例2
      /* var arr = ['eric','Tom','Jerry']
      const [name1,name2,name3,name4] = arr */
      //案例3
      /* let arr = ['eric','Tom','Jerry']
      const [name1,name2,name3,name4] = arr */
      //案例4
      const arr = ['eric','Tom','Jerry']
      let [name1,name2,name3,name4] = arr
      console.log(name1,name2,name4)
    "
  对象解构赋值:
    - "
      //案例1
      /* var obj = {
          name:'eric',
          age:16,
          fun:function(){}
      }
      var {name,age,fun,hello} = obj
      console.log(name,age,fun,hello) */
      //案例2
      /* const obj = {
          name:'eric',
          age:16,
          fun:function(){}
      }
      let {name,age,fun,hello} = obj
      console.log(name,age,fun,hello) */
      //案例3
      /* let obj = {
          name:'eric',
          age:16,
          fun:function(){}
      }
      var {name,age,fun,hello} = obj
      console.log(name,age,fun,hello) */
      //案例4
        function fun({name,age,sex}){
            console.log(name,age,sex)
        }
        fun({
            name:'eric',
            age:16,
            sex:'男'
        })
      //案例5
       function fun([el0,el1,el2=10]){
           console.log(el0,el1,el2)
       }
       fun([1,2])
    "
  Set解构:
    - "
      var [el1,el2,el3] = new Set([1,2,3])
      console.log(el1,el2,el3)
    "
模版字符串:
  - 支持换行拼接
  - 支持表达式拼接，使用${}
  - "
    var name = 'eric'
    var age = 18
    var obj = {
        sex:'男'
    }
    const str = `
        名字是:${name},年龄:${age},性别:${obj.sex}
    `
    console.log(str)
  "
简化对象赋值和对象方法声明:
  - "
    let name = 'eric'
    let fun = function(){}

    //写法1
    const obj1 = {
        'name':name,
        'fun':fun,
        'fun1':function(){}
    }
    console.log(obj1)

    //写法2
    const obj2 = {
        name:name,
        fun:fun,
        fun1:function(){}
    }
    console.log(obj2)

    //写法3
    const obj3 = {
        name,
        fun,
        fun1(){}
    }
    console.log(obj3)
  "
箭头函数:
  功能:
    - 箭头函数没有this，使用任何方式都不能改变this指向
    - 在箭头函数中使用this,这个this始终指向作用域链的this
    - 不能使用new实例化
    - 箭头函数没有arguments
  案例:
    - "
        //案例1
        /* const fun = () =>{
            console.log(1)
        }
        console.log(fun.__proto__ === fun.__proto__.constructor.prototype)
        console.log(fun.__proto__.constructor.__proto__ == Function.prototype) */

        //案例2
        /* var obj = {
            fun:()=>{
                console.log(this)
            },
            fun1(){
                return ()=>{
                    console.log(this)
                }
            }
        }
        obj.fun()
        obj.fun1()() */

        //案例3，简写方式，和Java很像
        /* var fun1 = x => x+x;
        var fun2 = (x,y) => x+y;
        var fun2 = (x,y) => {
            console.log(x,y)
            return x+y;
        }; */
    "
给参赋默认值:
  - "
    //案例1，给解构对象赋默认值
     /* var obj={
      name:'eric',
      age:28
     }

     var {name,age=19,sex='男'} = obj
     console.log(name,age,sex) */

     //案例2，函数形参赋默认值
     /* function fun(name,age,sex='男'){
      console.log(name,age,sex)
     }
     fun('eric',30) */

     //案例3，函数形参的解构对象赋默认值
     /* function fun1({name,age,sex='男'}){
      console.log(name,age,sex)
     }
     fun1({
      name:'eric',
      age:31
      }) */

      //案例4
      function fun2([el0,el1,el2=10]){
          console.log(el0,el1,el2)
      }
      fun2([1,2])
  "
可变参数:
  - "
    function fun(x,y,{name,age,sex='男',...obj},... args){
        console.log(arguments)
        console.log(x,y,name,age,sex,obj,args)
    }

    fun(1,2,{name:'eric',age:29,hello1:'hello1',hello2:'hello2'},3,4)
  "
拆分:
  拆分数组:
  - "
    //案例1，对数组进行拆分
    function fun(){
        console.log(arguments)
    }

    const arr = [0,1,2]
    fun(...arr)

    //案例2,实现浅拷贝
    const arr1 = [0,1,2]
    const arr2 = [3,4,5]
    const arr3 = [...arr1,...arr2]
    console.log(arr3)

    //案例3，维数组转换为真数组
    function fun4(){
        let arr = [...arguments]
        console.log(arr)
    }
    fun4(arr,1,2,3)
  "
  拆分Set:
    - "
      //案例1
      /* const set = new Set([1,2,3,4,5,6,7,7,8,8])
      const arr = [...set]
      console.log(arr) */

      //案例2
      function fun(el1,el2,el3 = 10){
          console.log(el1,el2,el3)
      }
      const set = new Set([1,2,2])
      fun(...set)

      //案例3
      function fun2([el1,el2,el3]){
          console.log(el1,el2,el3)
      }
      fun2(new Set([1,2,3]))
      fun2([...new Set([4,5,6])])
    "
  拆分对象:
    - "
      var obj1 ={
          name:'eric',
          age: 31
      }
      var obj2 ={
          sex:'男'
      }

      let obj3 = {...obj1,...obj2}
      console.log(obj3)
    "
Symbol:
  功能:
    - Symbol是js的第七种数据类型，它的值独一无二
    - Symbol值不能参与运算
    - Symbol定义的对象属性需要用Reflect.ownKeys来获取
    - Symbol可以防止在未知对象属性的情况下添加方法，而不导致属性冲突的情况
  拥有该Symbol属性函数如下:
    - Array
    - Arguments
    - Set
    - Map
    - String
    - TypedArray
    - NodeList
  案例:
    - "
      //Symbol创建方式
      //创建方式1
      let s1 = Symbol('eric')
          let s2 = Symbol('eric')
          console.log(s1 === s2) // false
      //创建方式2
          s3 = Symbol.for('eric')
          s4 = Symbol.for('eric')
          console.log(s3 === s4) //true
    "
    - "
      var arr = {
        '0':'Eric',
        [1]:'Jerry',
        [1+1]:'Tom',
        grabage:'不需要遍历',
        [3]:'Jone',
      }
      function enhancer(obj){
      let arr = []
      let index = 0
      for(let attr in obj){
        if(Number(attr)||Number(attr) ==0){
          arr[index] = obj[attr]
          index++
          delete obj[attr]
        }
      }
      obj['list'] = arr
      obj[Symbol.iterator] = function(){
        let index = 0
        let length = this.list.length
        return {
          next:()=>{
            if(index<length){
              return {done:false,value:this.list[index++]}
            }else{
              return {done:true,value:undefined}
            }
          }
        }
      }
    }

    enhancer(arr)

    for(let val of arr){
      console.log(val)
    }
    "
生成器函数:
  - 生成器函数可以解决函数地狱问题
  - "
    function fun1(){
        console.log('获取用户信息')
        setTimeout(function(){
            iterator.next({id:'1',userName:'eric'})
        },0)
    }
    function fun2(){
        console.log('获取订单信息')
        setTimeout(function(){
            iterator.next({id:'2',orderName:'列表清单'})
        },0)
    }
    function fun3(){
        console.log('获取商品信息')
        setTimeout(function(){
            iterator.next({id:'3',userName:'iphone4s'})
        },0)
    }


    let fun = function * (){
        let result = yield fun1()
        console.log('结果',result)
        result = yield fun2()
        console.log('结果',result)
        result = yield fun3()
        console.log('结果',result)
    }
    //console.log(enhancer.__proto__ === Function.prototype)

    let iterator = fun()
    iterator.next()
  "
Promise:
  - Promise函数可以解决函数地狱问题
  - "
    new Promise((resolve,reject)=>{
        console.log('发起第一请求')
        if(true){
            let data = {name:'eric',age:31}
            resolve(data)
        }else{
            reject('error')
        }
    }).then((data)=>{
        console.log('结果为',data)
        return new Promise((resolve,reject)=>{
            console.log('发起第二次请求')
            if(true){
                let data1 = {name:'Tom',age:18}
                resolve([data,data1])
            }
        })
    },(reason)=>{
        console.log(reason)
    }).then(([data,data1])=>{
        console.log('所有结果为',data,data1)
    })
  "
Set:
  - "
    const set = new Set([1,2,3,4,5,5,6])
    set.add(10)
    set.delete(10)
    console.log(set.has(5))
    set.clear()
    for(let i of set){
        console.log(i)
    }
  "
  - "
    //去重数组
    /* let arr = [1,1,2,2,3,3,4,4]
    arr = [...new Set(arr)]
    console.log(arr) */

    //求交集
    /* let arr1 = [1,2,3,4,5,9,9]
    let arr2 = [4,5,6,7,8,9,9]

    let set = new Set(arr2)
    let result = [...new Set(arr1)].filter((el)=>set.has(el))
    console.log(result) */


    //求并集
    /* let arr1 = [1,2,3,4,5,9,9]
    let arr2 = [4,5,6,7,8,9,9]
    let arr3 = [...new Set([...arr1,...arr2])]
    console.log(arr3) */

    //求arr1差集
    let arr1 = [1,2,3,4,5,9,9]
    let arr2 = [4,5,6,7,8,9,9]
    let set = new Set(arr2)
    let result = [...new Set(arr1)].filter((el) => !(set.has(el)))
    console.log(result)
  "
Map:
  - "
    let map = new Map()
    map.set('eric1','eric1')
    map.set('eric2','eric2')
    map.set('eric3','eric3')

    map.delete('eric1')
    console.log(map.get('eric2'))
    for(let arr of map){
        console.log(arr[0],arr[1])
    }

    map.clear()
  "
class:
  类入门使用: "
    class Person{
        //添加在Perosn类模版实例对象身上
        static name = 'Tom'
        static age = 18
        //添加在Perosn类实例对象身上
        name
        age
        //私有属性
        #realname = '私有名字李雅秋'
        constructor(name,age){
            this.name = name
            this.age = age
        }
        //添加在Person类模版实例对象身上
        static Hello(){
            console.log('类模版实例Hello')
        }
        //添加在Person类显示原型身上
        Hello(){
            console.log('对象实例Hello',this.#realname)
        }
    }
    //实例对象用法
    let person = new Person('eric',31)
    console.log(person.name)
    console.log(person.age)
    person.Hello()

    //类模版实例对象用法
    console.log(Person.name)
    console.log(Person.age)
    Person.Hello()
  "
  类继承: "
    //es5继承
    /* function Phone(brand,price){
        this.brand = brand
        this.price = price
    }

    Phone.prototype.sayHello = function(){
        console.log('sayHello')
    }

    function SmartPhone(brand,price,color,size){
        Phone.call(this,brand,price)
        this.color = color
        this.size = size
    }

    SmartPhone.prototype = new Phone()
    SmartPhone.prototype.constructor = SmartPhone

    let sp = new SmartPhone('iphone4','1500$','红色','11寸')
    console.log(sp) */


    //es6继承
    class Phone{
        constructor(brand,price){
            this.brand = brand
            this.price = price
        }
        static sayHello(){
            console.log('static sayHello')
        }
        sayHello(){
            console.log('sayHello')
        }
    }

    class SmartPhone extends Phone{
        constructor(brand,price,color,size){
            super(brand,price)
            this.color = color
            this.size = size
        }
    }

    let sp = new SmartPhone('iphone4','1500$','红色','11寸')
    sp.sayHello()
    console.log(sp)

    SmartPhone.sayHello()
  "
  类get和set: "
    //es5
    /* function Person(){
        this.name = 'eric'
        this.age = 23
    }
    let person = new Person()
    function enhancer(obj){
        var proxyObj = {}
        for(let attr in obj){
            proxyObj['_'+attr] = obj[attr]
            //console.log(attr)
            Object.defineProperty(proxyObj,attr,{
                get:function(){
                    //console.log('get访问了name属性')
                    return obj[attr]
                },
                set(value){
                    //console.log('set访问了name属性')
                    proxyObj['_'+attr] = value
                    obj[attr] = value;
                }
            })
        }
        return proxyObj
    }
    let personProxy = enhancer(person)
    console.log(personProxy)
    personProxy.name = 'Tom'
    personProxy.age = 20
    console.log(personProxy)
    console.log(Object.getOwnPropertyDescriptors(personProxy)) //查看对象属性的状态 */

    //es6
    class Person{
        realname = 'eric'
        get name(){
            console.log('get访问了name属性')
            return this.realname
        }
        set name(value){
            console.log('set访问了name属性')
            this.realname = value
        }
    }
    let person = new Person()
    console.log(person)
    person.name = 'Tom'
    console.log(person)
  "
模块化:
  静态导入使用方式1:
    - "
      步骤一 17.1模块化-8.1图片与文字居中对齐-1.1小三角-案例1.html
      <script type='module'>
          //方式1
          /* import * as m1 from './17module.js'
          console.log(m1.name)
          m1.sayHello() */

          /* import {name as aname,sayHello} from './17module.js'
          console.log(aname)
          sayHello() */

          //方式2
          /* import * as m2 from './17module.js'
          console.log(m2.name)
          m2.sayHello() */

          /* import {name as aname,sayHello} from './17module.js'
          console.log(aname)
          sayHello() */

          //方式3
          /* import * as m3 from './17module.js'
          console.log(m3.default.name)
          m3.default.sayHello() */

          /* import {default as m3} from './17module.js'
          console.log(m3.name)
          m3.sayHello() */

          import m3 from  './17module.js'
          console.log(m3.name)
          m3.sayHello()
      </script>
      步骤二 17module.js
        //方式1，逐个暴露
        /* export let name = '逐个暴露'
        export function sayHello(){
            console.log('逐个暴露','sayHello')
        } */


        //方式2，统一暴露
        /* let name = '统一暴露'
        function sayHello(){
            console.log('统一暴露','sayHello')
        }
        export {name,sayHello} */

        //方式3，默认暴露
        export default {
            name: '默认暴露',
            sayHello(){
                console.log('默认暴露','sayHello')
            }
        }
    "
  静态导入使用方式2:
    - "
      步骤一 17.2模块化-8.2图片与文字居中对齐-1.2小三角案例2.html
        <script src='./17moduleManager.js' type='module'></script>
      步骤二 17moduleManager.js
        //方式1
        /* import * as m1 from './17module.js'
        console.log(m1.name)
        m1.sayHello() */

        /* import {name as aname,sayHello} from './17module.js'
        console.log(aname)
        sayHello() */

        //方式2
        /* import * as m2 from './17module.js'
        console.log(m2.name)
        m2.sayHello() */

        /* import {name as aname,sayHello} from './17module.js'
        console.log(aname)
        sayHello() */

        //方式3
        /* import * as m3 from './17module.js'
        console.log(m3.default.name)
        m3.default.sayHello() */

        /* import {default as m3} from './17module.js'
        console.log(m3.name)
        m3.sayHello() */

        import m3 from  './17module.js'
        console.log(m3.name)
        m3.sayHello()

      步骤三 17module.js
        //方式1，逐个暴露
        /* export let name = '逐个暴露'
        export function sayHello(){
            console.log('逐个暴露','sayHello')
        } */


        //方式2，统一暴露
        /* let name = '统一暴露'
        function sayHello(){
            console.log('统一暴露','sayHello')
        }
        export {name,sayHello} */

        //方式3，默认暴露
        export default {
            name: '默认暴露',
            sayHello(){
                console.log('默认暴露','sayHello')
            }
        }
    "
  动态导入:
    - "
      <script type='module'>
          document.getElementById('bt').onclick = function(){
              import('./17module.js').then(module =>{
                  console.log(module.default().name)
                  module.default().sayHello()
              })
          }
      </script>
    "
  模块化import提升: 带有import导入的js模块文件，都会预先提升到最前面先执行，和var变量提升一个原理
async函数:
  功能:
    - 只要 return，都是返回成功的Promise对象
    - 只要 throw， 都是返回失败的Promise对象
    - 手动return返回Promise对象，根据自己调用的成功或者失败作为返回
  使用:
    - "
        async function person(){
          return new Promise((resolve,reject)=>{
              resolve('成功')
          })
        }
        person().then((data)=>{
          console.log(data)
        })
    "
await:
  功能:
    - await必须写在async函数中
    - await右侧的表达式一般为promise对象
    - await返回的是promise成功的值
    - await的promise失败了，就会报出异常，需要通过try..catch捕获处理
  使用:
    - "
        function fun1(){
          return new Promise((resolve,reject)=>{
            if(true){
              resolve('成功1结果数据返回')
            }else{
              reject('失败结果数据')
            }
          })
       }
       function fun2(){
          return new Promise((resolve,reject)=>{
            if(true){
              resolve('成功2结果数据返回')
            }else{
              reject('失败结果数据')
            }
          })
       }


        async function person(){
          try {
            let fun1result = await fun1()
            let fun2result = await fun2()
            console.log(fun1result)
            console.log(fun2result)
          } catch (error) {
            console.error(error)
          }
        }

        person()
    "
可选链操作符:
  - "
    function connect(option){
        //let username = option && option.username
        let username = option ?.username
        console.log(username)
    }


    const dbConfig = {
        username:'admin',
        passwd:'123456',
        url:'mysql//192.168.1.109:3306/db1'
    }

    connect(dbConfig)
  "
获取全局对象的变量:
  - "console.log(globalThis)"
对象方法扩展:
  - "
    //幂运算
    /* console.log( 2 ** 10) */

    //正则表达式分组捕获
    /* let str = 'http://www.baidu.com'
    let reg = /(?<value1>.*):\/\/(?<value2>.*)/
    console.log(reg.exec(str).groups.value1)
    console.log(reg.exec(str).groups.value2) */

    /* let str1 = '123abcabc123abcabc123abcggggggggAbcabc'
    let result = str1.matchAll(/(abc){2}/ig)
    for(let i of result){
       console.log(i[0])
    } */

    //数组方法扩展
    /* let arr = [1,2,3]
    console.log(arr.includes(2))
    console.log(arr.includes(4)) */

    let arr = [true,false,true,true,false]
    const result = arr.reduce((pre,value)=> value?pre+=1:pre ,0)
    console.log(result)

    //Object对象方法扩展
    /* console.log(Object.is(NaN,NaN))

    let obj1 = {
       name: 'eric',
       age: 100
    }
    let obj2 = {
       age: 31,
       mex: '男'
    }

    let obj3 = Object.assign(obj1,obj2)

    console.log(obj3)
    console.log(Object.keys(obj3))
    console.log(Object.values(obj3))


    const map = new Map(Object.entries(obj3))
    console.log(map)
    let obj4 = Object.fromEntries(map)
    console.log(obj4)

    console.log(Object.getOwnPropertyDescriptors(obj3)) */


    //字符串
    /* let str = '     i love you     '
    console.log(str.trim())
    console.log(str.trimStart())
    console.log(str.trimEnd()) */

    //Promise
    /* const p1 = new Promise((resolve,reject) =>{
       resolve('成功1')
    })
    const p2 = new Promise((resolve,reject) =>{
       resolve('成功2')
    })


    //不管有没有错误都返回成功
    console.log(Promise.allSettled([p1,p2]))
    //有一个出错都返回错误
    console.log(Promise.all([p1,p2])) */

    //BigInt 可以实现更加的数值计算
    /* let num = Number.MAX_SAFE_INTEGER
    console.log(num)
    console.log(num+1)
    console.log(num+2)
    console.log(BigInt(num)+ BigInt(2))  */
  "