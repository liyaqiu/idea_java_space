官网:
  - https://nodejs.org/zh-cn/
  - jsonserver https://github.com/typicode/json-server
  - 包查找地址 https://www.npmjs.com/
  - vscode 执行node需要以管理员身份运行
nodejs介绍:
  - nodejs基数版本是开发版本，偶数版本为稳定版本
  - nodejs封装了V8执行引擎，在nodejs平台上可以运行js代码，这样就脱离了浏览器运行js代码
  - "
    浏览器提供的api
      Dom api
      Bom api
      Canvas api
      XMLHttpRequest api
      js内置对象 api
    nodejs提供的api
      fs api
      path api
      http api
      js内置对象 api
  "
nodejs安装: 下载执行下一步
CommonJS规范:
  - 模块引用
  - 模块定义
  - 模块标识
模块化概念:
  功能:
    - 在Node中，一个js文件就是一个模块
    - 在Node中，每一个js文件中的js代码都是独立运行在一个函数中(可以看成es5中的闭包)，而不是全局作用域，所以一个模块中的变量和函数在其他模块中无法访问
    - 每个模块的用户代码都是运行在一个函数内部，因次都有一个arguments对象， function (exports, require, module, __filename, __dirname) {}
    - 可以利用exports 或者 module.exports 或者 this 进行暴露函数内部的变量和函数
    - 每一个模块都有一个全局的对象global,等同于浏览器的window对象
  案例:
    - "
      /*
          在浏览器中的全局对象是window === globalThis === self
          在node中，全局对象是 global === globalThis
      */
          /* a = '声明全局变量'
          fun = function(){
              console.log('声明全局函数')
          }
          global.console.log(global.a)
          global.fun() */


      //每个模块的用户代码都是运行在一个函数内部，因次都有一个arguments对象， function (exports, require, module, __filename, __dirname) {}
          //console.log(arguments.callee.toString())

      //1参数exports，专门用来暴露该模块的变量或者函数，也可以用module.exports 或者 this 进行暴露函数内部的变量和函数
          //需要注意的是，最后暴露出去的是这个引用，module.exports
          //console.log(exports === this) //true
          //console.log(exports === module.exports) //true
          /* exports.att1 = 'att1'
          module.exports.att2 = 'att2'
          this.fun = ()=>{
              console.log('fun')
          } */

      //2参数require，用来引入系统内置模块和用户自定义模块
          //引入自定义模块，js后缀可以省略
              const m1 = require('./2.2模块')
              const m2 = require('./2.3模块')
              //调用模块中的属性
                  //console.log(m1.moduleName)
                  //console.log(m2.moduleName)
              //调用模块中的方法
                  //m1.fun()
                  //m2.fun()
          //引入核心模块
              const fs = require('fs')
              const path = require('path')
              //console.log(fs,path)
          //引入npm下载的包，会一直往上一级node_modules目录找，直到找到根位置
              const m3 = require('math')
              console.log(m3.add(100,200))

      //3参数module，代表模块本身

      //4参数__filename，当前文件的完整路径
          //console.log(__filename)

      //5参数__dirname，当前文件的目录路径
          //console.log(__dirname)
    "
包概念:
  - 一个功能可能由多个模块组成，那么就需要将多个模块放在一个包里面。
  - 每个包在根目录下必须包含(package.json文件)，可选包含(bin、lib、doc、test)
  - package.json文件用于描述整个包里面各个模块的结构，以及各种乱七八糟的描述信息，告诉使用者
npm:
  功能:
    - npm(node package manager)node包管理器
    - CommonJS包规范是理论，NPM是其中一种实践
    - 对于Node而言，NPM帮助其完成了第三方模块的发布、安装和依赖等。
    - 借助NPM，弄的与第三方模块之间形成了一个很好的生态系统。
  命令:
    常用:
      - npm init 初始化，使用npm前记得初始化在使用
      - npm s/search packName 搜索包名
      - npm i/install 会根据当前路径下package.json进行依赖下载
      - npm i/install packName -save 添加包并且保存依赖
      - npm r/remove/uninstall packName 在当前目录卸载安装包
    不常用:
      - npm -v 查看npm版本
      - npm version 查看各种版本信息
      - npm info packName
      - npm config ls 查看配置
      - npm config ls -l 查看配置列表
      - npm config set registry=www.xxx.com 设置镜像源
      - npm install packName -registry=www.xxx.com 从某个镜像源安装
      - npm i/install packName 在当前目录安装包
      - npm install packName -g 把包安装到全局,默认路径C:\Users\admin\AppData\Roaming\npm\node_modules
    淘宝cnpm:
      - https://npmmirror.com/
      - npm install -g cnpm --registry=https://registry.npmmirror.com
nodejs模块:
  fs文件系统模块:
  path路径模块:
  http模块: