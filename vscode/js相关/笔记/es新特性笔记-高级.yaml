try-catch:
  - "
      function PersonError([appName,code,error]){
        this.appName = appName
        this.code = code
        this.msg = error.message
        this.stack = error.stack
        this.print = function(){
          console.error(this.appName,'@@@@',this.code,'@@@@',this.msg,'@@@@',this.stack)
        }
      }

      try {
        throw new PersonError(['服务1',408,new Error('id不存在')])
        console.log('eric')
      } catch (e) {
        /* const {appName,code,msg,stack} = e
        console.error(e.appName,e.code,e.msg,e.stack) */
          e.print()
      }
  "
回调地狱问题:
  - 回调地狱是指，内部函数依赖外部函数的结果，形成的多层嵌套
Promise:
  功能:
    - Promise是JS中进行异步编程新的解决方案
    - Promise是用来封装一个异步操作并可以获取其结果
    - Promise可以灵活编写回调，可以任何时间去获取结果
    - Promise链接操作可以解决回调地狱问题
  状态:
    - pending(初始化) -> resolved (成功)
    - pending(初始化) -> rejected (失败)
  入门案例:
    案例1:
      - "
      var executor = (resolve,reject) =>{
          console.log(0)
          //因为执行器函数是同步函数，所以利用setTimeout设置异步函数
          setTimeout(()=>{
              for(let i=0;i<1000000000;i++){}
              console.log(3)
              //resolve('执行结果为123456789')
              reject('执行结果为123456789')
          },1000)

      }

      const p = new Promise(executor)

      console.log(1)

      setTimeout(()=>{
          p.then((result)=>{ //给Promise管理器声明了取结果的函数，一旦有结果，Promise管理器就会将结果以及该函数对象一并存入回调队列中。
              console.log('onResolved',result)
          })
          p.catch((reason) =>{
              console.log('onRejected',reason)
          })
      },0)

      console.log(2)
    "
    案例2:
      - "
        //先改状态，后指定回调函数
        new Promise((resolve,reject) =>{
            resolve('1')
        }).then(
            value => {
                console.log(value)
            },
            reason =>{
                console.log(reason)
            }
        )

        //先指定回调函数，后改状态
        new Promise((resolve,reject) =>{
            setTimeout(()=>{
                resolve('2')
            },1000)
        }).then(
            value => {
                console.log(value)
            },
            reason =>{
                console.log(reason)
            }
        )
      "
  执行器的返回结果:
    - "
      var executor = (resolve,reject) =>{
          //resolve('成功')
          //reject('失败')
          //throw '失败1'
      }

      const p = new Promise(executor)

      p.then((result)=>{
              console.log('onResolved1',result)
      })
      p.then((result)=>{
              console.log('onResolved2',result)
      })
      p.catch((reason) =>{
          console.log('onRejected1',reason)
      })
      p.catch((reason) =>{
          console.log('onRejected2',reason)
      })

    "
  then返回结果:
    - "
        let executor = (resolve,reject) =>{
            //resolve('成功1')
            reject('失败1')
            //throw '失败11'
        }

        let p1 = new Promise(executor)

        let p2 = p1.then(
            value => {
                console.log('p1-onResolved',value)
            },
            reason =>{
                console.log('p1-onRejected',reason)
                    //return '正常返回'
                    //throw '抛异常返回'

                    //返回Promise对象
                    return new Promise((resolve,reject) =>{
                        resolve('成功2')
                        //reject('失败2')
                        //throw '失败22'
                    })

            }
        )

        p2.then(
            value => {
                console.log('p2-onResolved',value)
            },
            reason =>{
                console.log('p2-onRejected',reason)
            }
        )
    "
  总结then+执行器返回结果:
    - then支持，正常返回(return)，异常返回(throw)，执行器返回
    - 执行器返回支持，成功返回(resolve)，失败返回(reject)，异常返回(throw)
  catch和then传透:
    功能:
      - "
        因为需要逐个往下传递的原因，成功回调函数默认不写则为。
          return 1
          return Promise.resovle(1)
      因为需要逐个往下传递的原因，失败回调函数默认不写则为。
          throw 1
          return Promise.reject(1)
      "
    then传透:
      - "
        //案例1
        /* new Promise((resovle,reject)=>{
            resovle(1)
        }).catch(reason =>{
          console.log('reason1',reason)
        }).catch(reason =>{
          console.log('reason2',reason)
        }).catch(reason =>{
          console.log('reason3',reason)
        }).catch(reason =>{
          console.log('reason4',reason)
        }).then(value => {
            console.log('value',value)
        }) */
      "
    catch穿透:
      - "
        /* new Promise((resovle,reject)=>{
            reject(1)
        }).then(value =>{
          console.log('value1',value)
        }).then(value =>{
          console.log('value2',value)
        }).then(value =>{
          console.log('value3',value)
        }).then(value =>{
          console.log('value4',value)
        }).catch(reason => {
            console.log('reason',reason)
        }) */
      "
  终止Promise链操作:
    - "
      new Promise((resovle,reject)=>{
        resovle(1)
      }).then(value =>{
        console.log('value1',value)
        return new Promise(()=>{})
      }).then(value =>{
        console.log('value2',value)
      }).then(value =>{
        console.log('value3',value)
      }).then(value =>{
        console.log('value4',value)
      }).catch(reason => {
          console.log('reason',reason)
      })
    "
  语法糖resolve和reject:
    - "
        const p1 = new Promise((resolve,reject)=>{
            resolve('成功结果为1')
        })

        p1.then(value =>{
            console.log(value)
        })

        const p2 = Promise.resolve('成功结果2')
        p2.then(value =>{
            console.log(value)
        })

        const p3 = Promise.reject('失败结果3')
        p3.catch(reason =>{
            console.log(reason)
        })
    "
  语法糖all和race:
    - "
      const p1 = Promise.resolve(1)
      const p2 = Promise.resolve(2)
      const p3 = Promise.resolve(Promise.reject(3))


      const pAll = Promise.all([p1,p2,p3])
      pAll.then(values =>{
          console.log('values',values)//需要全部成功才返回，并且会按照预先顺序返回
      },reason =>{
          console.log('reason',reason)//返回第一个最先修改Promise状态的值
      })


      const pRace = Promise.race([p1,p2,p3])
      pRace.then(value =>{
          console.log('value',value)//返回第一个最先修改Promise状态的成功值
      },reason =>{
          console.log('reason',reason)//返回第一个最先修改Promise状态的失败值
      })
    "
  async-await:
    - "
      //async函数一定返回Promise对象
        async function fn(){
            //return '成功返回' //返回成功的Promise
            //throw '异常返回' //返回失败的Promise
            return new Promise((resolve,reject)=>{
                //resolve('成功结果')
                //reject('失败结果')
                //throw '失败结果抛出'
            })
        }


        function fn1(){
            //return '成功返回' //返回成功的Promise
            //throw '异常返回' //返回失败的Promise
            return new Promise((resolve,reject)=>{
                resolve('成功结果')
                //reject('失败结果')
                //throw '失败结果抛出'
            })
        }


        async function fun(){
            /**
            await除了会从Promise类型上获取值，其余类型都是原样返回
            await必须卸载async函数中
            */
            try {
                //let result = await fn()
                let result = await fn1()
                console.log('await ',result)
            } catch (error) {
                console.log('await ',error) //获取失败Promise的结果
            }
        }

        fun()
    "
  宏队列于微队列:
    功能:
      - JS引擎首先必须先执行所有的初始化同步任务代码
      - 每次准备取出第一个宏任务执行前，都要将所有的微任务一个一个取出来执行。
    宏队列:
      - 用来保存待执行的红任务(回调函数以及一些结果值)，例如，DOM回调，定时器回调，ajax回调
    微队列:
      - 用来保存待执行的微任务(回调函数以及一些结果值)，例如，Promise回调，MutationObserver回调
      - https://www.bilibili.com/video/BV1MJ41197Eu?p=38&vd_source=cc17fab1d456bc3958dcb51e2fdd520b
  模拟Promise实现:
    - "
      ;(function(window){

          const PENDING = 'pending'
          const RESOLVED = 'resolved'
          const REJECTED = 'rejected'

          function Promise(executor){
              const _this = this
              _this.data = undefined
              _this.callbacks = []
              _this.state = PENDING

              //添加数据，并且更改状态，执行回调函数把数据返回
              function resolve(value){
                  //只能改一次状态
                  if(PENDING !== _this.state ){
                      return
                  }
                  _this.state = RESOLVED
                  _this.data = value
                  if(_this.callbacks.length>0){
                      setTimeout(()=>{
                          _this.callbacks.forEach(el =>{
                              el.onResolved(_this.data)
                          })
                      })
                  }
              }

              //添加数据，并且更改状态，执行回调函数把数据返回
              function reject(reason){
                  //只能改一次状态
                  if(PENDING !== _this.state ){
                      return
                  }
                  _this.state = REJECTED
                  _this.data = reason
                  if(_this.callbacks.length>0){
                      setTimeout(()=>{
                          _this.callbacks.forEach(el =>{
                              el.onRejectd(_this.data)
                          })
                      })
                  }
              }

              try {
                 // reject('失败') resolve('成功')
                  const result = executor(resolve,reject)
              } catch (error) {
                  //throw '失败1'
                  reject(error)
              }
          }


          //定义原型方法,实例对象可以通过隐式原型访问
          Promise.prototype.then = function(onResolved,onRejectd){
              //调用者的_this
              const _this = this

              onResolved = (typeof onResolved) === 'function' ? onResolved:value => {return value}
              onRejectd = (typeof onRejectd) === 'function' ? onRejectd:reason =>{ throw reason}

              return new Promise((resolve,reject)=>{
                  function handle(fun){
                      try {
                          let result = fun(_this.data)

                          if(result instanceof Promise){ //Promise执行器函数,进入递归模式

                              let promise = result
                              promise.then(
                                  value =>{
                                      resolve(value)
                                  },
                                  reason =>{
                                      reject(reason)
                                  }
                              )
                              //promise.then(resolve,reject)

                          }else{//正常的return返回
                              //更改本次Promise状态，以及设置本次Promise数据
                              resolve(result)
                          }
                      } catch (error) {//throw返回
                          //更改本次Promise状态，以及设置本次Promise数据
                          reject(error)
                      }
                  }

                  //改了状态和增加了数据，但未返回数据
                  if(_this.state === RESOLVED){
                      //console.log('RESOLVED RESOLVED')
                      setTimeout(()=>{
                          handle(onResolved)
                      })
                  //改了状态和增加了数据，但未返回数据
                  }else if(_this.state === REJECTED){
                      //console.log('REJECTED REJECTED')
                      setTimeout(()=>{
                          handle(onRejectd)
                      })

                  //未改状态和没增加数据，所以只能保存回调函数
                  }else if(_this.state === PENDING){
                      //console.log('PENDING PENDING')
                      _this.callbacks.push({
                          onResolved(value){
                              handle(onResolved)
                          },
                          onRejectd(reason){
                              handle(onRejectd)
                          }
                      })
                  }
              })

          }

          //返回新的失败Promise对象
          Promise.prototype.catch = function(onRejectd){
              //let _this = this
              //console.log('catch执行')
              return this.then(undefined,onRejectd);
          }

          //定义函数对象方法，通过函数对象可以直接访问

              //返回新的成功Promise对象
              Promise.resolve = function(value){


              }
              //返回新的失败Promise对象
              Promise.reject = function(reason){
                  return new Promise((resolve,reject)=>{
                      throw reason
                  })
              }

              //全部成功时，返回Promise数组
              //失败1个，返回失败的Promiose实例
              Promise.all = function(promises){

              }

              //有一个成功或者一个失败，立即返回Promose实例对象
              Promise.race = function(promises){

              }

          window.Promise = Promise
      })(window)

    "
Axios: