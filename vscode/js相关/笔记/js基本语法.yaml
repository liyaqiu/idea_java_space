JS介绍:
  - JavaScript遵循ECMAScript规范
  - 一个完成的JavaScript有3部分组成，ECMAScript、DOM、BOM
  - JavaScript是一门解析型语言，基于原型的面向对象语言
JS五种数据类型:
  基本数据类型:
    - String
    - Boolean
    - Number
    - Undefined
  引用数据类型:
    - Object
JS二进制/八进制/十六进制赋值:
  - 八进制 0 或 0o 或 0O
  - 十六进制 0x 或 0X
  - 二进制 0b 或者 0B
类型转换:
  显示类型转换:
    转换为String:
      - "
        //能调用toString()
        window.console.log('false |',false.toString(),typeof false.toString())
        window.console.log('NaN |',NaN.toString())
        window.console.log('"" |',"".toString())
        window.console.log('true |',true.toString())
        window.console.log('Infinity |',Infinity.toString())
        window.console.log('-Infinity |',-Infinity.toString())
        window.console.log('new Object |',new Object().toString())

        //不能调用toString()
        //window.console.log('null |',null.toString())
        //window.console.log('undefined |',undefined.toString())
        //window.console.log('数值 |',数值.toString())

        console.log('-------------------------------------------------')

        window.console.log('false |',String(false))
        window.console.log('null |',String(null))
        window.console.log('NaN |',String(NaN))
        window.console.log('0 |',String(0))
        window.console.log('"" |',String(""))
        window.console.log('undefined |',String(undefined))
        window.console.log('true |',String(true))
        window.console.log('Infinity |',String(Infinity))
        window.console.log('-Infinity |',String(-Infinity))
        window.console.log('123 |',String(123))
        window.console.log('-123 |',String(-123))
        window.console.log('new Object |',String(new Object))
        window.console.log('hello |',String('hello'))
    "
    转换为Number: `
      //为0
      window.console.log('false |',Number(false))
      window.console.log('null |',Number(null))
      window.console.log('0 |',Number(0))
      window.console.log('"" |',Number(""))
      window.console.log('"0" |',Number("0"))
      window.console.log('-----------------------------------')

      //为1
      window.console.log('true |',Number(true))
      window.console.log('-----------------------------------')
      //为NaN
      window.console.log('NaN |',Number(NaN))
      window.console.log('undefined |',Number(undefined))
      window.console.log('new Object |',Number(new Object))
      window.console.log('123hello123 |',Number('123hello123'))
      window.console.log('"true" |',Number("true"))
      window.console.log('"false" |',Number("false"))
      window.console.log('-----------------------------------')
      //为Infinity
      window.console.log('Infinity |',Number(Infinity))
      window.console.log('Infinity |',Number(-Infinity))
      window.console.log('-----------------------------------')
      //方式2
      //将参数转换为字符串以后进行逐个转换，遇到非数字就停止转换，并10进制方式转换
      window.console.log('parseInt(123.584px)  |',parseInt('123.584px',10))
      window.console.log('parseFloat(123.584px)  |',parseFloat('123.584px',10))
      //返回NaN
      window.console.log('""  |',parseFloat('',10)) `
    转换为Boolean:
      - "
          //为false
          window.console.log('false |',Boolean(false))
          window.console.log('null |',Boolean(null))
          window.console.log('NaN |',Boolean(NaN))
          window.console.log('0 |',Boolean(0))
          window.console.log('"" |',Boolean(""))
          window.console.log('undefined |',Boolean(undefined))

          //为true
          window.console.log('true |',Boolean(true))
          window.console.log('Infinity |',Boolean(Infinity))
          window.console.log('-Infinity |',Boolean(-Infinity))
          window.console.log('123 |',Boolean(123))
          window.console.log('-123 |',Boolean(-123))
          window.console.log('new Object |',Boolean(new Object))
          window.console.log('hello |',Boolean('hello'))
    "
  隐式类型转换(运算符):
    先转换为Number类型在运算:
      - 具体如何转，查看类型转换
      - (加+、减-、乘*、除/、取余%) 加号操作字符串例外
      - (负号-、正号+)
      - `
        (> < ≥ ≤)
        情况1
          将左右两边字面量转化为数值，然后比较，返回true/false，
        情况2
          如果转有任意一边转换为NaN值，则直接返回false
        情况3
          如果两边都为字符串，则比较的是Unicode编码，逐个字符串进行比较，如果第一位比别人的第一位小，则返回，如果相同，则继续比较。
      - `
         (==，!=)
          正常情况1
            通过Number()进行转换后成为数值，则可以进行比较，结果为true/false
          特殊情况2
            null==undefined，相等
            NaN==NaN，不相等，可以通过isNaN()函数进行判断
        `
      - `
        (===，!==) 次比较不会做类型转换，直接返回true/false
          特殊情况
          null===undefined，不相等
          NaN===NaN，不相等，可以通过isNaN()函数进行判断
        `
    先转换为Boolean类型在运算:
      - 具体如何转，查看类型转换
      - (非!、或||、与&&)
      - (三目运算符?:)
运算符:
  短路与(短路与的true是返回右边):
    - 只拿左边第一个进行boolean转换，如果true，返回右边的，右边是啥类型返回啥类型
    - 只拿左边第一个进行boolean转换，如果false，返回左边的，左边是啥类型返回啥类型
    - `
      //只拿左边第一个进行boolean转换，如果true，返回右边的，右边是啥类型返回啥类型
      console.log('true&&false |',true&&false,'| ',typeof (true&&false))
      console.log('true&&11 |',true&&11,'| ',typeof (true&&11))
      console.log('true&&NaN |',true&&NaN,'| ',typeof (true&&NaN))
      console.log('true&&undefined |',true&&undefined,'| ',typeof (true&&undefined))
      console.log('true&&Infinity |',true&&Infinity,'| ',typeof (true&&Infinity))
      console.log('true&&`hello" |',true&&"hello",'| ',typeof (true&&"11"))
      console.log('true&&new Object() |',true&&new Object(),'| ',typeof (true&&new Object()))
      //console.log('true&&alert(1)" |',true&&alert(1),'| ',typeof (true&&alert(1)))

      console.log('-------------------------------------------')
      //为true
      /* window.console.log('true |',Boolean(true))
      window.console.log('Infinity |',Boolean(Infinity))
      window.console.log('-Infinity |',Boolean(-Infinity))
      window.console.log('123 |',Boolean(123))
      window.console.log('-123 |',Boolean(-123))
      window.console.log('new Object |',Boolean(new Object))
      window.console.log('hello |',Boolean('hello')) */
      console.log('Infinity&&返回我 |',Infinity&&'返回我','| ',typeof (Infinity&&'返回我'))
      console.log('-Infinity&&返回我 |',-Infinity&&'返回我','| ',typeof (-Infinity&&'返回我'))
      console.log('123&&返回我 |',123&&'返回我','| ',typeof (123&&'返回我'))
      console.log('-123&&返回我 |',-123&&'返回我','| ',typeof (-123&&'返回我'))
      console.log('new Object()&&返回我 |',new Object()&&'返回我','| ',typeof (new Object()&&'返回我'))
      console.log('"hello"&&返回我 |',"hello"&&'返回我','| ',typeof ("hello"&&'返回我'))

      console.log('-------------------------------------------')
      /* //为false
      window.console.log('false |',Boolean(false))
      window.console.log('null |',Boolean(null))
      window.console.log('NaN |',Boolean(NaN))
      window.console.log('0 |',Boolean(0))
      window.console.log('"" |',Boolean(""))
      window.console.log('undefined |',Boolean(undefined)) */
      //只拿左边第一个进行boolean转换，如果false，返回左边的，左边是啥类型返回啥类型
      console.log('false&&返回我 |',false&&'返回我','| ',typeof (false&&'返回我'))
      console.log('null&&返回我 |',null&&'返回我','| ',typeof (null&&'返回我'))
      console.log('NaN&&返回我 |',NaN&&'返回我','| ',typeof (NaN&&'返回我'))
      console.log('""&&返回我 |',""&&'返回我','| ',typeof (""&&'返回我'))
      console.log('undefined&&返回我 |',undefined&&'返回我','| ',typeof (undefined&&'返回我'))
      `
  短路或:
    - 只拿左边第一个进行boolean转换，如果true，返回左边的，左边是啥类型返回啥类型
    - 只拿左边第一个进行boolean转换，如果false，返回右边的，右边是啥类型返回啥类型
    - `
      //只拿左边第一个进行boolean转换，如果true，返回左边的，左边是啥类型返回啥类型
      //为true
      /* window.console.log('true |',Boolean(true))
      window.console.log('Infinity |',Boolean(Infinity))
      window.console.log('-Infinity |',Boolean(-Infinity))
      window.console.log('123 |',Boolean(123))
      window.console.log('-123 |',Boolean(-123))
      window.console.log('new Object |',Boolean(new Object))
      window.console.log('hello |',Boolean('hello')) */
      console.log('true||返回我 |',true||'返回我','| ',typeof (true||'返回我'))
      console.log('Infinity||返回我 |',Infinity||'返回我','| ',typeof (Infinity||'返回我'))
      console.log('-Infinity||返回我 |',-Infinity||'返回我','| ',typeof (-Infinity||'返回我'))
      console.log('123||返回我 |',123||'返回我','| ',typeof (123||'返回我'))
      console.log('-123||返回我 |',-123||'返回我','| ',typeof (-123||'返回我'))
      console.log('new Object()||返回我 |',new Object()||'返回我','| ',typeof (new Object()||'返回我'))
      console.log('"hello"||返回我 |',"hello"||'返回我','| ',typeof ("hello"||'返回我'))

      console.log('-------------------------------------------')

      //只拿左边第一个进行boolean转换，如果false，返回右边的，右边是啥类型返回啥类型
      console.log('false||false |',false||false,'| ',typeof (false||false))
      console.log('false||11 |',false||11,'| ',typeof (false||11))
      console.log('false||NaN |',false||NaN,'| ',typeof (false||NaN))
      console.log('false||undefined |',false||undefined,'| ',typeof (false||undefined))
      console.log('false||Infinity |',false||Infinity,'| ',typeof (false||Infinity))
      console.log('false||"hello" |',false||"hello",'| ',typeof (false||"11"))
      console.log('false||new Object() |',false||new Object(),'| ',typeof (false||new Object()))
      //console.log('false||alert(1)" |',false||alert(1),'| ',typeof (false||alert(1)))
      console.log('-------------------------------------------')
      /* //为false
      window.console.log('false |',Boolean(false))
      window.console.log('null |',Boolean(null))
      window.console.log('NaN |',Boolean(NaN))
      window.console.log('0 |',Boolean(0))
      window.console.log('"" |',Boolean(""))
      window.console.log('undefined |',Boolean(undefined)) */
      console.log('false||返回我 |',false||'返回我','| ',typeof (false||'返回我'))
      console.log('null||null |',null||'返回我','| ',typeof (null||null))
      console.log('NaN||返回我 |',NaN||'返回我','| ',typeof (NaN||'返回我'))
      console.log('""||返回我 |',""||'返回我','| ',typeof (""||'返回我'))
      console.log('undefined||返回我 |',undefined||'返回我','| ',typeof (undefined||'返回我'))
      `
  非:
    - 将某个类型数据进行boolean转换，如果为true返回true，如果为false返回false
    - `
      /*
      //为false
      window.console.log('false |',Boolean(false))
      window.console.log('null |',Boolean(null))
      window.console.log('NaN |',Boolean(NaN))
      window.console.log('0 |',Boolean(0))
      window.console.log('"" |',Boolean(""))
      window.console.log('undefined |',Boolean(undefined))
      */
      console.log('!false |',!false,'| ',typeof (!false))
      console.log('!null |',!null,'| ',typeof (!null))
      console.log('!NaN |',!NaN,'| ',typeof (!NaN))
      console.log('!0 |',!0,'| ',typeof (!0))
      console.log('!"" |',!"",'| ',typeof (!""))
      console.log('!undefined |',!undefined,'| ',typeof (!undefined))

      console.log("------------------------------------------")
      /*
      //为true
      window.console.log('true |',Boolean(true))
      window.console.log('Infinity |',Boolean(Infinity))
      window.console.log('-Infinity |',Boolean(-Infinity))
      window.console.log('123 |',Boolean(123))
      window.console.log('-123 |',Boolean(-123))
      window.console.log('new Object |',Boolean(new Object))
      window.console.log('hello |',Boolean('hello'))  */

      console.log('!true |',!true,'| ',typeof (!true))
      console.log('!Infinity |',!Infinity,'| ',typeof (!Infinity))
      console.log('!-Infinity |',!-Infinity,'| ',typeof (!-Infinity))
      console.log('!123 |',!123,'| ',typeof (!123))
      console.log('!-123 |',!-123,'| ',typeof (!-123))
      console.log('!new Object() |',!new Object(),'| ',typeof (!new Object()))
      console.log('!"hello" |',!'hello','| ',typeof (!'hello'))
      `
代码块: 在js中代码只具有分组的作用，没有其他的用途，在代码块中的代码，在外部是完全可见的