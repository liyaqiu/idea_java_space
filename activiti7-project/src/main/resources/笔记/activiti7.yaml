初级:
  BPMN(Business Process Model AndNotation):
    概述:
      - 业务流程剑魔和符号，是由BPMI开发的一套标准的业务流程建模符号，使用BPMN提供的符号可以创建业务流程
    BPMN插件安装:
      - https://www.pudn.com/news/62ad3ffbdfc5ee19687a718d.html
      - https://plugins.jetbrains.com/plugin/7429-actibpm/versions
      - actibpm.jar 改版本号即可
    符号说明:
      Event(事件):
        - StartEvent(开始事件)
        - IntermediateEvent(中间事件)
        - EndEvent(结束事件)
      Activity(活动):
        - 活动是工作或任务的一个通用术语，一个活动可以是一个任务，还可以事一个当前流程的子处理流程，其次，可还可以为活动指定不同的类型。
        - UserTask(用户任务)
        - ServiceTask(服务任务)
        - SubProcess(子流程)
      Gateway(网关):
        概述:
          - 网关用来处理决策
        排它网关(x):
          - 只有一条路径会被选择，流程执行到该网关时，按照输出流的顺序逐个计算，当条件的计算结果为true时，继续执行当前网关的输出流
          - 如果多条线路计算结果都是true，则会选择id值较小的线路，如果网关的所有分支都为false，则引擎会抛出异常
          - 排它网关需要和条件顺序流结合使用，default属性指定默认顺序流，当所有的条件不满足时会执行默认顺序流
        并行网关(+):
          - 拆分（fork分支），并行网关会执行它下游的所有分支
          - 合并（join汇聚），并行网关联到的所有上游分支都需要执行完成才允许往下执行
        包含网关(○):
          - 可以同时执行多条路线，也可以在网关上设置条件
          - 拆分，计算每条路线上的表达式，当表达式计算结果为true时，创建一个并行路线并继续执行
          - 合并，所有从并行网关拆分并执行完成的路线均在此等候，指导所有的路线都执行完成才继续向下执行
        事件网关(○+※):
          - 专门为中间捕获时间设置的，允许设置多个输出流指向多个不同的中间捕获事件，当流程执行到事件网关后，流程处于等待状态，需要等待抛出事件才能将等待状态转换为活动状态
        综合网关(※):
      Flow(流向):
        - SequenceFlow(顺序流)
        - MessageFlow(消息流)
        - Association(关联)
        - DataAssociation(数据关联)
    解决PNG图片生成问题:
      - IDEA下找不到diagrams按钮选项的解决方案
      - https://blog.csdn.net/qq_43592352/article/details/114579359?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-114579359-blog-122833017.pc_relevant_multi_platform_whitelistv4&spm=1001.2101.3001.4242.1&utm_relevant_index=3
      - https://www.bilibili.com/video/BV1H54y167gf?p=18&vd_source=cc17fab1d456bc3958dcb51e2fdd520b
    解决BPMN乱码问题:
      - https://blog.csdn.net/LFP528136199/article/details/115583248
  Activiti7:
    生命周期/使用步骤: 部署activiti引擎 -> 流程定义 -> 流程定义部署 -> 启动流程实例 -> 用户查询待办任务 -> 用户办理任务 -> 流程结束
  表结构（25张表）:
    ACT_GE(General)(2):
      概述: 保存通用数据
      ACT_GE_BYTEARRAY: 通用的流程定义和流程资源
      ACT_GE_PROPERTY: 系统相关属性
    ACT_RE(Repository)(3):
      概述: 保存流程定义和流程静态资源 （图片、规则等等）
      ACT_RE_DEPLOYMENT: 部署单元信息
      ACT_RE_PROCDEF: 已部署的流程定义
      ACT_RE_MODEL: 模型信息
    ACT_RU(Runtime)(10):
      概述: 保存运行时数据（流程实例、任务、变量、异步任务等等）
      ACT_RU_TASK: 运行时任务
      ACT_RU_EXECUTION: 运行时流程执行实例(与业务关联的表BUSINESS_KEY_)
      ACT_RU_IDENTITYLINK: 运行时用户关系信息，存储任务节点与参与者的相关信息
      ACT_RU_JOB: 运行时作业
      ACT_RU_EVENT_SUBSCR: 运行时事件
      ACT_RU_VARIABLE: 运行时变量表
      ACT_RU_TIMER_JOB:
      ACT_RU_DEADLETTER_JOB:
      ACT_RU_INTEGRATION:
      ACT_RU_SUSPENDED_JOB:
    ACT_HI(History)(8):
      概述: 保存历史时数据（全流程：流程实例、任务、变量、异步任务等等）
      ACT_HI_ACTINST: 历史的流程实例
      ACT_HI_IDENTITYLINK: 历史的流程运行过程中用户关系
      ACT_HI_PROCINST: 历史的流程实例
      ACT_HI_TASKINST: 历史的任务实例
      ACT_HI_ATTACHMENT: 历史的流程附件
      ACT_HI_COMMENT: 历史的说明性信息
      ACT_HI_DETAIL: 历史的流程运行中的细节信息
      ACT_HI_VARINST: 历史的流程运行中的变量信息
    其他:
      ACT_EVT_LOG:
      ACT_PROCDEF_INFO:
  Service:
    PepositoryService:
      概述:
        - 资源管理类
        - 提供了管理和控制流程发布包和流程定义的操作，使用工作流建模工具设计的业务流程图需要使用此Service将流程定义文件的内容部署到计算机
        - 除了以流程定义以外还可以查询引擎中的发布包和流程定义
        - 暂停或激活发布包，对应全部和特定流程定义，暂停意味着他们不能在执行操作了，激活是对应的反向操作，获得多种资源，像是包含在发布包里的文件，或引擎自动生成的流程图
        - 获得流程定义的POJO版本，可以用来通过Java解析流程，而不必通过XML
    RuntimeServive:
      概述:
        - 流程运行管理类
        - 可以从这个服务类中获取更多关于流程执行相关的信息
    TaskService:
      概述:
        - 任务管理类
        - 可以从这个类中获取任务的信息
    HistoryService:
      概述:
        - 历史管理类
        - 可以查询历史信息，执行流程时，引擎会保存很多数据(根据配置)，比如流程实例启动时间，任务的参与者，完成任务的时间，每个流程实例的执行路径，等等。这个服务主要通过查询功能来获得这些数据
    ManagerServive:
      概述:
        - 引擎管理类
        - 提供对流程引擎的管理和维护功能，这些功能不在工作流驱动的应用程序中使用，主要用于系统的日常维护
  HelloWorld:
    定义流程:
      - 按照BPMN的规范，使用流程定义工具，用流程符号把整个流程描述出来
    部署流程:
      - 把话好的流程定义文件加载到数据库中，生成表的数据
    启动流程:
      - 使用Java代码来操作数数据库表中的数据
高级:
  流程定义与流程实例的关系:
    - 一个流程定义(流程模版)可以有多个流程实例(流程申请)
    - 一个BPMN的id = ACT_RE_DEPLOYMENT表里面的KEY字段
  挂起与激活:
    流程实例挂起: 此流程实例不能操作
    流程定义挂起: 此流程定义不允许在生成新的流程实例，并且该流程定义下的所有流程实例都不能操作
  UEL表达式:
    概述:
      - UEL是Java EE6规范的一部分，activiti支持两种UEL表达式
      - UEL表达式在BPMN中使用
    使用:
      UEL-value定义:
        - ${user.userName}
        - ${num}
        - user是activiti的一个流程变量，user.userName表示通过user的getter方法获取值
      UEL-method定义:
        - ${user.getUserName()}
        - user是Spring容器中的一个bean，表示调用该bean的getUserName()方法
      UEL-method&&UEL-value定义:
        - ${user.getUserName(emp)}
        - user是Spring容器中的一个bean，表示调用该bean的getUserName()方法。emp是activiti的一个流程变量，emp作为参数传入到getUserName()方法中
      其他:
        - 表达式支持解析基础类型，bean，list，array和map，也可以作为条件判断
        - ${order.price > 100 && order.price < 200}
        - ${num>=3}
  分配任务负责人(BPMN中的assignee属性):
    固定分配: 直接在assignee属性中填写具体的值
    UEL表达式分配: 直接在assignee属性中填写具体的UEL表达式
    监听器分配:
      概述:
        - 可以使用监听器来完成很多Activiti流程的业务
        - 使用监听器制定负责人，则需要实现TaskListener接口，并且设置负责人(不需要在流程设计时制定assignee)
      Event的选项包含:
        - Create 任务创建后触发
        - Assignment 任务分配后触发
        - Delete 任务完成后触发
        - All 所有事件发生都触发
  流程变量:
    概述:
      - 流程变量在activiti中是一个非常重要的角色，流程运转有时需要靠流程变量，业务系统和activiti结合时少不了流程变量，流程变量就是activiti在管理工作流时根据管理需要而设置的变量
      - 比如:在出差申请流程流转时如果出差天数大于3天则由总经理审核，否则由人事直接审核，出差天数就可以设置为流程变量，在流程流转时使用
    支持的类型: String，Integer，Short，Long，Doubule，Boolean，Data，Binary，Object 需要实现 Serializable接口
    流程变量作用域:
      概述:
        - Local变量由于在不同的任务或者不同的执行实例中，作用域互不影响，因此变量名可以相同
      Global变量（默认作用域）:
        概述:
          - 存放在流程实例(ProcessInstance)
        生命周期:
          - 在当前流程实例结束之前使用，但是支持历史变量查询(从历史表查询)
      Local变量:
        概述:
          - 存放在任务(Task)
          - 存放在执行实例(Execution)
        生命周期:
          - 在当前任务结束之前使用，但是支持历史变量查询(从历史表查询)
    流程变量的使用场景:
      多分支流程走向控制(BPMN中的condition属性):
        概述:
          - condition属性中支持UEL表达式，并且需要返回布尔值(true/false)
          - 在连线的condition属性中设置，${leaveForm.num<3}和${leaveForm.num>=3}来完成控制
        设置global变量的4种方式:
          - 案例 _4多分支流程走向控制_启动流程时设置Global变量
          - 案例 _5多分支流程走向控制_任务办理时设置Global变量
          - 案例 _6多分支流程走向控制_通过ExecutionId设置Global变量
          - 案例 _7多分支流程走向控制_通过TaskId设置Global变量
  任务分配多个候选人:
    概述:
      - 在流程定义中，在任务节点的assignee属性中设置任务的负责人，在流程定义时将参与者固定设置在bpmn文件中，如果临时任务负责任变更则需要修改流程定义，系统可扩展性差
      - 针对这种情况，可以给任务设置多个候选人，可以从候选人中选择参与者来完成任务
    任务分配多个候选人_处理流程: 查询组任务 -> 拾取任务 -> 查询个人任务 -> 办理个人任务
    任务分配多个候选人_归还流程: 查询组任务 -> 拾取任务 -> 查询个人任务 -> 归还组任务(实际上是将任务的assignee置为Null即可)
    任务分配多个候选人_交接流程: 查询组任务 -> 拾取任务 -> 查询个人任务 -> 交接任务(实际上是将任务的assignee置为待交接人即可)，（可以设置候选人，或者设置任意人）
    案例:
      - _8任务分配多个候选人_处理流程
      - _9任务分配多个候选人_归还流程
      - _10任务分配多个候选人_交接流程交接流程
  Gateway(网关):
    概述:
      - 网关用来处理决策
    直接连线实现和网关的区别:
      概述:
        - 如果连线的条件都不满足的时候，流程就会结束了(是异常结束)【错误的说法】
        - 如果条件都不满足则抛异常
      结论:
        - 直接连接和网关都会抛出异常，但不会结束流程【代码验证过】
    排它网关(x)ExclusiveGateway:
      概述:
        - 只有一条路径会被选择，流程执行到该网关时，按照输出流的顺序逐个计算，当条件的计算结果为true时，继续执行当前网关的输出流
        - 如果多条线路计算结果都是true，则会选择id值较小的线路，如果网关的所有分支都为false，则引擎会抛出异常
        - 排它网关需要和条件顺序流结合使用，default属性指定默认顺序流，当所有的条件不满足时会执行默认顺序流
    并行网关(+)ParallelGateway:
      概述:
        - 分流（fork分支），并行网关会执行它下游的所有分支
        - 汇聚（join汇聚），并行网关联到的所有上游分支都需要执行完成才允许往下执行
      特殊之处:
        - 并行网关不会解析连线中的条件(condition属性)，即使在连线中定义了条件也会被忽略
      情况1: 如果只有分流没有汇聚，那么只要完成一个任务就会结束流程(但是任务里面还是存在未完成的任务)
    包含网关(○)InclusiveGateway:
      概述:
        - 包含网关是排他网关和并行网关的结合体，支持连线的条件判断、分流和汇聚
    事件网关(○+※)EventGateway:
      - 专门为中间捕获时间设置的，允许设置多个输出流指向多个不同的中间捕获事件，当流程执行到事件网关后，流程处于等待状态，需要等待抛出事件才能将等待状态转换为活动状态
  流程多个结束点测试:
    - 如果存在多个结束符号，则需要最后一个结束符号执行结束完，整个流程实例才算执行完